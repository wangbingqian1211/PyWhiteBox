{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      records: [{\n        id: 1,\n        name: '记录1'\n      }, {\n        id: 2,\n        name: '记录2'\n      }, {\n        id: 3,\n        name: '记录3'\n      }],\n      code: '',\n      userInputs: [],\n      // 存储用户的输入内容\n      testCases: [] // 用于存储生成的测试用例\n    };\n  },\n  methods: {\n    async submitCode() {\n      if (this.code.trim() === '') return; // 防止提交空输入\n\n      // 保存用户的输入\n      this.userInputs.push(this.code);\n      try {\n        // 调用后端 API 处理用户输入的代码\n        const response = await fetch('http://127.0.0.1:5000/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code\n          })\n        });\n        if (response.ok) {\n          const result = await response.json();\n          this.testCases = result.testCases; // 假设后端返回的结果包含 testCases 字段\n          this.code = ''; // 清空输入框\n        } else {\n          console.error('Error processing code');\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n      }\n    },\n    formatInputs(inputs) {\n      // 将 inputs 对象格式化为类似 \"{'age': -346, 'b': -886}\" 的字符串\n      return JSON.stringify(inputs).replace(/\"/g, \"'\");\n    }\n  }\n};","map":{"version":3,"names":["data","records","id","name","code","userInputs","testCases","methods","submitCode","trim","push","response","fetch","method","headers","body","JSON","stringify","ok","result","json","console","error","formatInputs","inputs","replace"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- 左侧菜单 -->\n    <aside class=\"sidebar\">\n      <ul>\n        <li v-for=\"record in records\" :key=\"record.id\">{{ record.name }}</li>\n      </ul>\n    </aside>\n\n    <!-- 右侧内容区域 -->\n    <main class=\"main-content\">\n      <!-- 上半部分，包含用户输入显示和测试结果 -->\n      <div class=\"upper-content\">\n        <!-- 显示用户输入的内容 -->\n        <div v-if=\"userInputs.length > 0\" class=\"user-input-area\">\n          <div v-for=\"(input, index) in userInputs\" :key=\"index\" class=\"user-input\">\n            <pre>{{ input }}</pre>\n          </div>\n        </div>\n\n        <!-- 显示介绍文字 -->\n        <div v-if=\"testCases.length === 0 && userInputs.length === 0\" class=\"centered-content\">\n          <h1>白盒测试通</h1>\n          <p>你的自动测试小助手</p>\n          <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\n        </div>\n\n        <!-- 测试结果显示在输入框上方 -->\n        <div v-if=\"testCases.length > 0\" class=\"output-area\">\n          <div v-for=\"(testCase, index) in testCases\" :key=\"index\" class=\"test-case\">\n            <p>测试用例 {{ index + 1 }}:</p>\n            <p>&nbsp;&nbsp;输入: {{ formatInputs(testCase.inputs) }}</p>\n            <p>&nbsp;&nbsp;条件: {{ testCase.conditions }}</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- 下半部分，固定的输入框 -->\n      <div class=\"input-area\">\n        <div class=\"input-row\">\n          <textarea\n              v-model=\"code\"\n              placeholder=\"请输入你要进行测试的代码\"\n              class=\"code-input\"\n          ></textarea>\n          <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      records: [\n        { id: 1, name: '记录1' },\n        { id: 2, name: '记录2' },\n        { id: 3, name: '记录3' }\n      ],\n      code: '',\n      userInputs: [],  // 存储用户的输入内容\n      testCases: [],  // 用于存储生成的测试用例\n    };\n  },\n  methods: {\n    async submitCode() {\n      if (this.code.trim() === '') return;  // 防止提交空输入\n\n      // 保存用户的输入\n      this.userInputs.push(this.code);\n\n      try {\n        // 调用后端 API 处理用户输入的代码\n        const response = await fetch('http://127.0.0.1:5000/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ code: this.code })\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          this.testCases = result.testCases;  // 假设后端返回的结果包含 testCases 字段\n          this.code = '';  // 清空输入框\n        } else {\n          console.error('Error processing code');\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n      }\n    },\n    formatInputs(inputs) {\n      // 将 inputs 对象格式化为类似 \"{'age': -346, 'b': -886}\" 的字符串\n      return JSON.stringify(inputs).replace(/\"/g, \"'\")\n    }\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  display: flex;\n  height: 100vh;\n  background-color: #f4f4f4;\n  overflow: hidden; /* 移除整个页面的滚动条 */\n}\n\n.sidebar {\n  width: 20%;\n  background-color: #f9f9f9;\n  padding: 20px;\n  border-right: 1px solid #ddd;\n}\n\n.sidebar ul {\n  list-style: none;\n  padding: 0;\n}\n\n.sidebar li {\n  padding: 10px 0;\n  cursor: pointer;\n}\n\n.sidebar li:hover {\n  background-color: #e0e0e0;\n}\n\n.main-content {\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  height: 100vh;\n}\n\n.upper-content {\n  flex: 1;\n  overflow-y: auto; /* 添加垂直滚动条 */\n  padding: 20px;\n  box-sizing: border-box;\n  overflow-x: hidden; /* 移除横向滚动条 */\n}\n\n.centered-content {\n  width: 100%;\n  max-width: 600px; /* 调整宽度，避免横向滚动条 */\n  margin: 0 auto;\n  text-align: center;\n  margin-bottom: 50px;\n}\n\n.user-input-area {\n  width: 100%;\n  background-color: #ffffff;\n  border: 1px solid #ccc;\n  padding: 10px;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n  max-width: 600px; /* 限制最大宽度，避免横向滚动条 */\n}\n\n.user-input {\n  background-color: #e0e0e0;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n}\n\n.user-input pre {\n  white-space: pre-wrap; /* 保留换行符和空格 */\n  font-family: monospace; /* 使用等宽字体 */\n  margin: 0;\n}\n\n.input-area {\n  padding: 20px;\n  border-top: 1px solid #ccc;\n  background-color: #f9f9f9;\n}\n\n.input-row {\n  display: flex;\n  align-items: center; /* 使按钮与输入框垂直居中对齐 */\n}\n\n.code-input {\n  flex: 1;\n  height: 50px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  resize: none; /* 禁用 textarea 调整大小 */\n  font-family: monospace; /* 使用等宽字体 */\n  white-space: pre; /* 保留空白字符和换行 */\n  margin-right: 10px; /* 为按钮留出一些空间 */\n}\n\n.submit-button {\n  padding: 10px 20px;\n  background-color: #535553;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  flex-shrink: 0;\n}\n\n.submit-button:hover {\n  background-color: #888f88;\n}\n\n.output-area {\n  width: 100%;\n  background-color: #ffffff;\n  border: 1px solid #ccc;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n  text-align: left;\n  max-width: 600px; /* 调整宽度，避免横向滚动条 */\n}\n\n.test-case {\n  background-color: #f4f4f4;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":";AAqDA;EACAA,KAAA;IACA;MACAC,OAAA,GACA;QAAAC,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,EACA;MACAC,IAAA;MACAC,UAAA;MAAA;MACAC,SAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,SAAAJ,IAAA,CAAAK,IAAA;;MAEA;MACA,KAAAJ,UAAA,CAAAK,IAAA,MAAAN,IAAA;MAEA;QACA;QACA,MAAAO,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAb,IAAA,OAAAA;UAAA;QACA;QAEA,IAAAO,QAAA,CAAAO,EAAA;UACA,MAAAC,MAAA,SAAAR,QAAA,CAAAS,IAAA;UACA,KAAAd,SAAA,GAAAa,MAAA,CAAAb,SAAA;UACA,KAAAF,IAAA;QACA;UACAiB,OAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACAD,OAAA,CAAAC,KAAA,2BAAAA,KAAA;MACA;IACA;IACAC,aAAAC,MAAA;MACA;MACA,OAAAR,IAAA,CAAAC,SAAA,CAAAO,MAAA,EAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}