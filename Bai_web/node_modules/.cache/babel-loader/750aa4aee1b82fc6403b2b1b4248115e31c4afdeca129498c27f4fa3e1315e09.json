{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      registerForm: {\n        username: '',\n        password: '',\n        confirmPassword: ''\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 4,\n          max: 10,\n          message: '用户名长度为4-10个字符',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 15,\n          message: '密码长度为6-15个字符',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请确认密码',\n          trigger: 'blur'\n        }, {\n          validator: this.validatePassword,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    validatePassword(rule, value, callback) {\n      if (value !== this.registerForm.password) {\n        callback(new Error('两次密码不一致，请重新输入密码'));\n      } else {\n        callback();\n      }\n    },\n    submitForm() {\n      this.$refs.registerForm.validate(async valid => {\n        if (valid) {\n          // 调用后端API检查用户名是否存在\n          const response = await this.checkUsername(this.registerForm.username);\n          if (response.exists) {\n            this.$message.error('用户名已存在，请重新输入');\n          } else {\n            // 如果用户名不存在，则继续注册\n            await this.registerUser(this.registerForm);\n            this.$message.success('注册成功');\n            this.$router.push('/login');\n          }\n        }\n      });\n    },\n    async checkUsername(username) {\n      try {\n        const response = await fetch('http://localhost:28080/api/check-username', {\n          method: 'POST',\n          body: JSON.stringify({\n            username\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        return await response.json();\n      } catch (error) {\n        console.error('Error fetching check-username API:', error);\n        throw error;\n      }\n    },\n    async registerUser(registerForm) {\n      // 发送请求将用户名和密码保存到数据库\n      const response = await fetch('http://localhost:28080/api/register', {\n        method: 'POST',\n        body: JSON.stringify(registerForm),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return await response.json();\n    }\n  }\n};","map":{"version":3,"names":["data","registerForm","username","password","confirmPassword","rules","required","message","trigger","min","max","validator","validatePassword","methods","rule","value","callback","Error","submitForm","$refs","validate","valid","response","checkUsername","exists","$message","error","registerUser","success","$router","push","fetch","method","body","JSON","stringify","headers","json","console"],"sources":["src/views/RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-container\">\r\n    <div class=\"register-box\">\r\n      <h2>用户注册</h2>\r\n      <el-form ref=\"registerForm\" :model=\"registerForm\" :rules=\"rules\" label-width=\"0px\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input class=\"el-input-user\" v-model=\"registerForm.username\" placeholder=\"请输入用户名\">\r\n            <template #prefix>\r\n              <img class=\"icon\" src=\"@/assets/用户.png\" />\r\n            </template>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item prop=\"password\">\r\n          <el-input class=\"el-input-pass\" v-model=\"registerForm.password\" type=\"password\" placeholder=\"请输入密码\">\r\n            <template #prefix>\r\n              <img class=\"icon\" src=\"@/assets/密码.png\" />\r\n            </template>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item prop=\"confirmPassword\">\r\n          <el-input class=\"el-input-word\" v-model=\"registerForm.confirmPassword\" type=\"password\" placeholder=\"请确认密码\">\r\n            <template #prefix>\r\n              <img class=\"icon\" src=\"@/assets/密码.png\" />\r\n            </template>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-button class=\"el-button-zhu\" type=\"primary\" @click=\"submitForm\">注册</el-button>\r\n        <div class=\"login-link\">\r\n          已有账号？ <router-link to=\"/login\">去登录</router-link>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      registerForm: {\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n      },\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' },\r\n          { min: 4, max: 10, message: '用户名长度为4-10个字符', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n          { min: 6, max: 15, message: '密码长度为6-15个字符', trigger: 'blur' }\r\n        ],\r\n        confirmPassword: [\r\n          { required: true, message: '请确认密码', trigger: 'blur' },\r\n          { validator: this.validatePassword, trigger: 'blur' }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    validatePassword(rule, value, callback) {\r\n      if (value !== this.registerForm.password) {\r\n        callback(new Error('两次密码不一致，请重新输入密码'));\r\n      } else {\r\n        callback();\r\n      }\r\n    },\r\n    submitForm() {\r\n      this.$refs.registerForm.validate(async (valid) => {\r\n        if (valid) {\r\n          // 调用后端API检查用户名是否存在\r\n          const response = await this.checkUsername(this.registerForm.username);\r\n          if (response.exists) {\r\n            this.$message.error('用户名已存在，请重新输入');\r\n          } else {\r\n            // 如果用户名不存在，则继续注册\r\n            await this.registerUser(this.registerForm);\r\n            this.$message.success('注册成功');\r\n            this.$router.push('/login');\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    async checkUsername(username) {\r\n      try {\r\n        const response = await fetch('http://localhost:28080/api/check-username', {\r\n          method: 'POST',\r\n          body: JSON.stringify({ username }),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        return await response.json();\r\n      } catch (error) {\r\n        console.error('Error fetching check-username API:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async registerUser(registerForm) {\r\n      // 发送请求将用户名和密码保存到数据库\r\n      const response = await fetch('http://localhost:28080/api/register', {\r\n        method: 'POST',\r\n        body: JSON.stringify(registerForm),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      return await response.json();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-container {\r\n  background-image: url('@/assets/水墨背景蒙版.png');\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.register-box {\r\n  background-color: white;\r\n  padding: 60px; /* 增加内边距，增大整体尺寸 */\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15); /* 增强阴影效果，使其更突出 */\r\n  width: 400px; /* 增加宽度 */\r\n  text-align: center;\r\n  font-size: 18px; /* 适当增大字体 */\r\n}\r\n\r\n.icon {\r\n  width: 30px; /* 增大图标尺寸 */\r\n  height: 30px;\r\n}\r\n\r\n.login-link {\r\n  margin-bottom: 10px;\r\n  color: #999;\r\n}\r\n\r\n.login-link a {\r\n  color: #409EFF;\r\n}\r\n\r\n.el-input-user {\r\n  height: 50px; /* 增大输入框高度 */\r\n  font-size: 18px; /* 增大输入框内字体的大小 */\r\n}\r\n.el-input-pass {\r\n  height: 50px; /* 增大输入框高度 */\r\n  font-size: 18px; /* 增大输入框内字体的大小 */\r\n}\r\n.el-input-word {\r\n  height: 40px; /* 增大输入框高度 */\r\n  font-size: 18px; /* 增大输入框内字体的大小 */\r\n}\r\n\r\n.el-button-zhu{\r\n  height: 50px; /* 增大按钮的高度 */\r\n  font-size: 20px; /* 增大按钮内文字的字体大小 */\r\n  padding: 10px 20px; /* 调整按钮内边距 */\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  border: none; /* 去掉描边 */\r\n  color: white; /* 确保文字颜色清晰可见 */\r\n  cursor: pointer; /* 鼠标移上去显示手型 */\r\n}\r\n</style>\r\n"],"mappings":";AAuCA;EACAA,KAAA;IACA;MACAC,YAAA;QACAC,QAAA;QACAC,QAAA;QACAC,eAAA;MACA;MACAC,KAAA;QACAH,QAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,eAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,SAAA,OAAAC,gBAAA;UAAAJ,OAAA;QAAA;MAEA;IACA;EACA;EACAK,OAAA;IACAD,iBAAAE,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,UAAAd,YAAA,CAAAE,QAAA;QACAa,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACAE,WAAA;MACA,KAAAC,KAAA,CAAAlB,YAAA,CAAAmB,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,MAAAC,QAAA,cAAAC,aAAA,MAAAtB,YAAA,CAAAC,QAAA;UACA,IAAAoB,QAAA,CAAAE,MAAA;YACA,KAAAC,QAAA,CAAAC,KAAA;UACA;YACA;YACA,WAAAC,YAAA,MAAA1B,YAAA;YACA,KAAAwB,QAAA,CAAAG,OAAA;YACA,KAAAC,OAAA,CAAAC,IAAA;UACA;QACA;MACA;IACA;IAEA,MAAAP,cAAArB,QAAA;MACA;QACA,MAAAoB,QAAA,SAAAS,KAAA;UACAC,MAAA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAjC;UAAA;UACAkC,OAAA;YACA;UACA;QACA;QACA,aAAAd,QAAA,CAAAe,IAAA;MACA,SAAAX,KAAA;QACAY,OAAA,CAAAZ,KAAA,uCAAAA,KAAA;QACA,MAAAA,KAAA;MACA;IACA;IAEA,MAAAC,aAAA1B,YAAA;MACA;MACA,MAAAqB,QAAA,SAAAS,KAAA;QACAC,MAAA;QACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAlC,YAAA;QACAmC,OAAA;UACA;QACA;MACA;MACA,aAAAd,QAAA,CAAAe,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}