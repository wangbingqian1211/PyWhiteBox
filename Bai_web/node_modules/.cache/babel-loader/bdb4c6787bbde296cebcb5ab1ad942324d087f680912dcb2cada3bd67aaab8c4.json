{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      code: '',\n      responseBlocks: [],\n      // 当前显示的输出内容\n      selectedOption: 'option1',\n      options: [{\n        value: 'option1',\n        label: '基本路径测试'\n      }, {\n        value: 'option2',\n        label: '路径覆盖测试'\n      }, {\n        value: 'option3',\n        label: 'GPT测试'\n      }],\n      savedRecords: [],\n      // 存储保存的输出记录\n      currentRecordId: null // 当前显示的记录ID\n    };\n  },\n  methods: {\n    // 注销功能\n    logout() {\n      this.$confirm('是否退出登录？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.$router.push('/login');\n      }).catch(() => {\n        this.$message.info('已取消退出');\n      });\n    },\n    async submitCode() {\n      if (this.code.trim() === '') return;\n      const currentCode = this.code;\n\n      // Improved loop detection for \"for\" or \"while\" using word boundaries\n      const hasLoop = /\\b(for|while)\\b/.test(currentCode);\n      try {\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code,\n            option: this.selectedOption\n          })\n        });\n        if (processResponse.ok) {\n          const result = await processResponse.json();\n          const newBlock = {\n            code: currentCode,\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`,\n            selectedOption: this.selectedOption,\n            hasLoop: hasLoop // Store if loop exists\n          };\n\n          // Only add test cases if no loop is detected\n          if (!hasLoop && (this.selectedOption === 'option1' || this.selectedOption === 'option2')) {\n            newBlock.testCases = result.testCases;\n          } else if (this.selectedOption === 'option3') {\n            newBlock.responseText = result.responseText;\n          }\n          this.responseBlocks.push(newBlock);\n          this.code = '';\n          this.resetTextareaHeight();\n        } else {\n          // If the backend responds with an error, show an alert message\n          const error = await processResponse.json();\n          console.error('Error processing code:', error.error);\n          alert(\"错误: 请输入标准python代码\");\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n        alert(\"错误: 请输入标准python代码\");\n      }\n    },\n    saveRecord() {\n      if (this.responseBlocks.length === 0) return; // 如果没有输出，不保存\n      const newRecord = {\n        id: Date.now(),\n        // 使用时间戳作为唯一ID\n        name: `记录 ${this.savedRecords.length + 1}`,\n        responseBlocks: [...this.responseBlocks] // 保存当前的输出内容\n      };\n      this.savedRecords.push(newRecord);\n      this.currentRecordId = newRecord.id;\n      alert('记录已保存');\n    },\n    loadRecord(recordId) {\n      const record = this.savedRecords.find(r => r.id === recordId);\n      if (record) {\n        this.currentRecordId = record.id;\n        this.responseBlocks = [...record.responseBlocks];\n      }\n    },\n    deleteRecord(recordId) {\n      const index = this.savedRecords.findIndex(r => r.id === recordId);\n      if (index !== -1) {\n        if (confirm('确定要删除此记录吗？')) {\n          this.savedRecords.splice(index, 1);\n          // 如果删除的是当前显示的记录，清空显示\n          if (this.currentRecordId === recordId) {\n            this.currentRecordId = null;\n            this.responseBlocks = [];\n          }\n          alert('记录已删除');\n        }\n      }\n    },\n    async downloadRecord(record) {\n      // 创建一个HTML字符串，包含图片和文本内容\n      let htmlContent = `\n        <html>\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>${record.name}</title>\n            <style>\n              body { font-family: Arial, sans-serif; padding: 20px; }\n              .section { margin-bottom: 20px; }\n              .section img { max-width: 100%; height: auto; }\n              .section pre { background-color: #f4f4f4; padding: 10px; border-radius: 4px; }\n              .test-case { background-color: #f4f4f4; padding: 10px; border-radius: 4px; margin-bottom: 10px; }\n              .test-case p { margin: 5px 0; }\n              h1 { text-align: center; }\n              h2 { color: #333; }\n            </style>\n          </head>\n          <body>\n            <h1>${record.name}</h1>\n            <p><strong>测试方法:</strong> ${this.getOptionLabel(record.responseBlocks[0]?.selectedOption)}</p>\n      `;\n      for (const block of record.responseBlocks) {\n        htmlContent += `<div class=\"section\">`;\n        // 添加流程图图片\n        if (block.flowchartPath) {\n          try {\n            const imageBase64 = await this.convertImageToBase64(block.flowchartPath);\n            htmlContent += `<h2>流程图:</h2>`;\n            htmlContent += `<img src=\"data:image/png;base64,${imageBase64}\" alt=\"流程图\"/>`;\n          } catch (error) {\n            console.error('Error fetching image:', error);\n            htmlContent += `<p>流程图无法加载。</p>`;\n          }\n        }\n        // 添加代码\n        htmlContent += `<h2>代码:</h2>`;\n        htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.code)}</pre>`;\n        // 添加测试用例或响应文本\n        if (block.testCases && block.testCases.length) {\n          htmlContent += `<h2>测试用例:</h2>`;\n          for (const [i, testCase] of block.testCases.entries()) {\n            htmlContent += `\n              <div class=\"test-case\">\n                <p><strong>测试用例 ${i + 1}:</strong></p>\n                <p>输入: ${this.formatInputs(testCase.inputs)}</p>\n                <p>条件: ${testCase.conditions}</p>\n              </div>\n            `;\n          }\n        } else if (block.responseText) {\n          htmlContent += `<h2>响应文本:</h2>`;\n          htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.responseText)}</pre>`;\n        }\n        htmlContent += `</div>`;\n      }\n      htmlContent += `\n          </body>\n        </html>\n      `;\n      // 创建Blob并触发下载\n      const blob = new Blob([htmlContent], {\n        type: 'application/msword'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${record.name}.doc`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    // 将图片URL转换为Base64\n    async convertImageToBase64(url) {\n      const response = await fetch(url, {\n        mode: 'cors'\n      });\n      const blob = await response.blob();\n      return await this.blobToBase64(blob);\n    },\n    // 将Blob转换为Base64\n    blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const base64data = reader.result.split(',')[1]; // 去掉前缀\n          resolve(base64data);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    },\n    clearScreen() {\n      this.responseBlocks = []; // 清空当前显示的输出内容\n    },\n    resetTextareaHeight() {\n      const element = this.$refs.codeInput;\n      element.style.height = 'auto';\n    },\n    formatInputs(inputs) {\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");\n    },\n    // 转义HTML特殊字符\n    escapeHtml(text) {\n      const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n      return text.replace(/[&<>\"']/g, function (m) {\n        return map[m];\n      });\n    },\n    // 获取选项的标签\n    getOptionLabel(value) {\n      const option = this.options.find(opt => opt.value === value);\n      return option ? option.label : value;\n    }\n  }\n};","map":{"version":3,"names":["data","code","responseBlocks","selectedOption","options","value","label","savedRecords","currentRecordId","methods","logout","$confirm","confirmButtonText","cancelButtonText","type","then","$router","push","catch","$message","info","submitCode","trim","currentCode","hasLoop","test","processResponse","fetch","method","headers","body","JSON","stringify","option","ok","result","json","newBlock","flowchartPath","testCases","responseText","resetTextareaHeight","error","console","alert","saveRecord","length","newRecord","id","Date","now","name","loadRecord","recordId","record","find","r","deleteRecord","index","findIndex","confirm","splice","downloadRecord","htmlContent","getOptionLabel","block","imageBase64","convertImageToBase64","escapeHtml","i","testCase","entries","formatInputs","inputs","conditions","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","response","mode","blobToBase64","Promise","resolve","reject","reader","FileReader","onloadend","base64data","split","onerror","readAsDataURL","clearScreen","element","$refs","codeInput","style","height","replace","text","map","m","opt"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 左侧菜单 -->\r\n\r\n    <aside class=\"sidebar\">\r\n      <h2 class=\"sidebar-title\">保存的记录</h2>\r\n      <ul>\r\n        <li v-for=\"record in savedRecords\" :key=\"record.id\" class=\"record-item\">\r\n          <div @click=\"loadRecord(record.id)\" class=\"record-name\">\r\n            {{ record.name }}\r\n          </div>\r\n          <div class=\"record-actions\">\r\n            <button @click.stop=\"downloadRecord(record)\" class=\"action-button download-button\">下载</button>\r\n            <button @click.stop=\"deleteRecord(record.id)\" class=\"action-button delete-button\">删除</button>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </aside>\r\n    <!-- 右侧内容区域 -->\r\n    <main class=\"main-content\">\r\n      <!-- 选择方法的独立区域 -->\r\n      <div class=\"selection-area\">\r\n        <div class=\"navbar\">\r\n          <div class=\"navbar-item\" @click=\"logout\">注销</div>\r\n        </div>\r\n        <el-select v-model=\"selectedOption\" placeholder=\"请选择测试方法\" class=\"method-select\">\r\n          <el-option\r\n              v-for=\"item in options\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n          </el-option>\r\n        </el-select>\r\n      </div>\r\n\r\n      <!-- 上半部分，包含用户输入显示和测试结果 -->\r\n      <div class=\"upper-content\">\r\n        <transition-group name=\"fade\" tag=\"div\">\r\n          <div v-for=\"(block, index) in responseBlocks\" :key=\"index\" class=\"response-block\">\r\n            <div v-if=\"block.flowchartPath\" class=\"flowchart-container\">\r\n              <img :src=\"block.flowchartPath\" alt=\"流程图\" class=\"flowchart-image\"/>\r\n            </div>\r\n            <div class=\"user-input\">\r\n              <h3>代码:</h3>\r\n              <pre>{{ block.code }}</pre>\r\n            </div>\r\n            <div class=\"output-area\">\r\n              <div v-if=\"block.testCases && block.testCases.length && !block.hasLoop\">\r\n                <h3>测试用例:</h3>\r\n                <div v-for=\"(testCase, i) in block.testCases\" :key=\"i\" class=\"test-case\">\r\n                  <p><strong>测试用例 {{ i + 1 }}:</strong></p>\r\n                  <p>输入: {{ formatInputs(testCase.inputs) }}</p>\r\n                  <p>条件:  {{ testCase.conditions }}</p>\r\n                </div>\r\n              </div>\r\n              <div v-else-if=\"block.responseText\">\r\n                <h3>响应文本:</h3>\r\n                <pre class=\"response-text\">{{ block.responseText }}</pre>\r\n              </div>\r\n              <div v-if=\"block.selectedOption\" class=\"method-info\">\r\n                <p><strong>测试方法:</strong> {{ getOptionLabel(block.selectedOption) }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </transition-group>\r\n        <div v-if=\"responseBlocks.length === 0\" class=\"intro-content\">\r\n          <h1>白盒测试通</h1>\r\n          <p>你的自动测试小助手</p>\r\n          <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 下半部分，固定的输入框 -->\r\n      <div class=\"input-area\">\r\n        <div class=\"input-row\">\r\n          <textarea\r\n              v-model=\"code\"\r\n              placeholder=\"请输入你要进行测试的代码\"\r\n              class=\"code-input\"\r\n              @input=\"autoResize\"\r\n              ref=\"codeInput\"\r\n          ></textarea>\r\n          <div class=\"button-group\">\r\n            <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\r\n            <button @click=\"saveRecord\" class=\"save-button\">保存记录</button>\r\n            <button @click=\"clearScreen\" class=\"clear-button\">清空屏幕</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      code: '',\r\n      responseBlocks: [],  // 当前显示的输出内容\r\n      selectedOption: 'option1',\r\n      options: [\r\n        { value: 'option1', label: '基本路径测试' },\r\n        { value: 'option2', label: '路径覆盖测试' },\r\n        { value: 'option3', label: 'GPT测试' }\r\n      ],\r\n      savedRecords: [], // 存储保存的输出记录\r\n      currentRecordId: null // 当前显示的记录ID\r\n    };\r\n  },\r\n  methods: {\r\n    // 注销功能\r\n    logout() {\r\n      this.$confirm('是否退出登录？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      })\r\n          .then(() => {\r\n            this.$router.push('/login');\r\n          })\r\n          .catch(() => {\r\n            this.$message.info('已取消退出');\r\n          });\r\n    },\r\n    async submitCode() {\r\n      if (this.code.trim() === '') return;\r\n      const currentCode = this.code;\r\n\r\n      // Improved loop detection for \"for\" or \"while\" using word boundaries\r\n      const hasLoop = /\\b(for|while)\\b/.test(currentCode);\r\n\r\n      try {\r\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.code, option: this.selectedOption })\r\n        });\r\n\r\n        if (processResponse.ok) {\r\n          const result = await processResponse.json();\r\n          const newBlock = {\r\n            code: currentCode,\r\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`,\r\n            selectedOption: this.selectedOption,\r\n            hasLoop: hasLoop  // Store if loop exists\r\n          };\r\n\r\n          // Only add test cases if no loop is detected\r\n          if (!hasLoop && (this.selectedOption === 'option1' || this.selectedOption === 'option2')) {\r\n            newBlock.testCases = result.testCases;\r\n          } else if (this.selectedOption === 'option3') {\r\n            newBlock.responseText = result.responseText;\r\n          }\r\n\r\n          this.responseBlocks.push(newBlock);\r\n          this.code = '';\r\n          this.resetTextareaHeight();\r\n        } else {\r\n          // If the backend responds with an error, show an alert message\r\n          const error = await processResponse.json();\r\n          console.error('Error processing code:', error.error);\r\n          alert(\"错误: 请输入标准python代码\");\r\n        }\r\n      } catch (error) {\r\n        console.error('Error submitting code:', error);\r\n        alert(\"错误: 请输入标准python代码\");\r\n      }\r\n    },\r\n    saveRecord() {\r\n      if (this.responseBlocks.length === 0) return; // 如果没有输出，不保存\r\n      const newRecord = {\r\n        id: Date.now(), // 使用时间戳作为唯一ID\r\n        name: `记录 ${this.savedRecords.length + 1}`,\r\n        responseBlocks: [...this.responseBlocks] // 保存当前的输出内容\r\n      };\r\n      this.savedRecords.push(newRecord);\r\n      this.currentRecordId = newRecord.id;\r\n      alert('记录已保存');\r\n    },\r\n    loadRecord(recordId) {\r\n      const record = this.savedRecords.find(r => r.id === recordId);\r\n      if (record) {\r\n        this.currentRecordId = record.id;\r\n        this.responseBlocks = [...record.responseBlocks];\r\n      }\r\n    },\r\n    deleteRecord(recordId) {\r\n      const index = this.savedRecords.findIndex(r => r.id === recordId);\r\n      if (index !== -1) {\r\n        if (confirm('确定要删除此记录吗？')) {\r\n          this.savedRecords.splice(index, 1);\r\n          // 如果删除的是当前显示的记录，清空显示\r\n          if (this.currentRecordId === recordId) {\r\n            this.currentRecordId = null;\r\n            this.responseBlocks = [];\r\n          }\r\n          alert('记录已删除');\r\n        }\r\n      }\r\n    },\r\n    async downloadRecord(record) {\r\n      // 创建一个HTML字符串，包含图片和文本内容\r\n      let htmlContent = `\r\n        <html>\r\n          <head>\r\n            <meta charset=\"UTF-8\">\r\n            <title>${record.name}</title>\r\n            <style>\r\n              body { font-family: Arial, sans-serif; padding: 20px; }\r\n              .section { margin-bottom: 20px; }\r\n              .section img { max-width: 100%; height: auto; }\r\n              .section pre { background-color: #f4f4f4; padding: 10px; border-radius: 4px; }\r\n              .test-case { background-color: #f4f4f4; padding: 10px; border-radius: 4px; margin-bottom: 10px; }\r\n              .test-case p { margin: 5px 0; }\r\n              h1 { text-align: center; }\r\n              h2 { color: #333; }\r\n            </style>\r\n          </head>\r\n          <body>\r\n            <h1>${record.name}</h1>\r\n            <p><strong>测试方法:</strong> ${this.getOptionLabel(record.responseBlocks[0]?.selectedOption)}</p>\r\n      `;\r\n      for (const block of record.responseBlocks) {\r\n        htmlContent += `<div class=\"section\">`;\r\n        // 添加流程图图片\r\n        if (block.flowchartPath) {\r\n          try {\r\n            const imageBase64 = await this.convertImageToBase64(block.flowchartPath);\r\n            htmlContent += `<h2>流程图:</h2>`;\r\n            htmlContent += `<img src=\"data:image/png;base64,${imageBase64}\" alt=\"流程图\"/>`;\r\n          } catch (error) {\r\n            console.error('Error fetching image:', error);\r\n            htmlContent += `<p>流程图无法加载。</p>`;\r\n          }\r\n        }\r\n        // 添加代码\r\n        htmlContent += `<h2>代码:</h2>`;\r\n        htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.code)}</pre>`;\r\n        // 添加测试用例或响应文本\r\n        if (block.testCases && block.testCases.length) {\r\n          htmlContent += `<h2>测试用例:</h2>`;\r\n          for (const [i, testCase] of block.testCases.entries()) {\r\n            htmlContent += `\r\n              <div class=\"test-case\">\r\n                <p><strong>测试用例 ${i + 1}:</strong></p>\r\n                <p>输入: ${this.formatInputs(testCase.inputs)}</p>\r\n                <p>条件: ${testCase.conditions}</p>\r\n              </div>\r\n            `;\r\n          }\r\n        } else if (block.responseText) {\r\n          htmlContent += `<h2>响应文本:</h2>`;\r\n          htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.responseText)}</pre>`;\r\n        }\r\n        htmlContent += `</div>`;\r\n      }\r\n      htmlContent += `\r\n          </body>\r\n        </html>\r\n      `;\r\n      // 创建Blob并触发下载\r\n      const blob = new Blob([htmlContent], { type: 'application/msword' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${record.name}.doc`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n    },\r\n    // 将图片URL转换为Base64\r\n    async convertImageToBase64(url) {\r\n      const response = await fetch(url, { mode: 'cors' });\r\n      const blob = await response.blob();\r\n      return await this.blobToBase64(blob);\r\n    },\r\n    // 将Blob转换为Base64\r\n    blobToBase64(blob) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          const base64data = reader.result.split(',')[1]; // 去掉前缀\r\n          resolve(base64data);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    },\r\n    clearScreen() {\r\n      this.responseBlocks = []; // 清空当前显示的输出内容\r\n    },\r\n    resetTextareaHeight() {\r\n      const element = this.$refs.codeInput;\r\n      element.style.height = 'auto';\r\n    },\r\n    formatInputs(inputs) {\r\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");\r\n    },\r\n    // 转义HTML特殊字符\r\n    escapeHtml(text) {\r\n      const map = {\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#039;'\r\n      };\r\n      return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\r\n    },\r\n    // 获取选项的标签\r\n    getOptionLabel(value) {\r\n      const option = this.options.find(opt => opt.value === value);\r\n      return option ? option.label : value;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 基本布局 */\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  background-color: #f0f2f5;\r\n  color: #333;\r\n}\r\n\r\n.navbar-item {\r\n  position: absolute; /* 定位该元素 */\r\n  top: 25px; /* 距离顶部 10px */\r\n  right: 100px; /* 距离右边 10px */\r\n  cursor: pointer; /* 鼠标悬停时显示为手形 */\r\n  padding: 12px 25px; /* 添加按钮内边距 */\r\n  background-color: #d3d3d3; /* 背景色，确保可见 */\r\n  border-radius: 5px; /* 圆角 */\r\n  font-family: '方正清刻本悦宋简体', sans-serif;\r\n  font-size: 18px;\r\n  transition: background-color 0.3s; /* 增加一个背景色变化效果 */\r\n}\r\n\r\n.navbar-item:hover {\r\n  background-color: #ccc; /* 鼠标悬停时改变背景色 */\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 侧边栏 */\r\n.sidebar {\r\n  width: 20%;\r\n  background-color: #f9f9f9; /* 浅灰色背景 */\r\n  color: #333;\r\n  padding: 0px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.sidebar-title {\r\n  font-size: 1.5em;\r\n  margin-bottom: 0px;\r\n  text-align: center;\r\n  //border-bottom: 1px solid #ddd;\r\n  padding-bottom: 0px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.record-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #fff; /* 浅色记录框 */\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  cursor: pointer;\r\n}\r\n\r\n.record-item:hover {\r\n  background-color: #e6f7ff; /* 浅蓝色悬停 */\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.record-name {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.record-actions {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.action-button {\r\n  padding: 5px 10px;\r\n  background-color: #ccc; /* 白灰色按钮背景 */\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.download-button {\r\n  background-color: #ddd; /* 浅灰色用于下载 */\r\n}\r\n\r\n.delete-button {\r\n  background-color: #ccc; /* 浅灰色用于删除 */\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #bbb; /* 更深的灰色悬停 */\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* 主要内容区域 */\r\n.main-content {\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 选择方法区域 */\r\n.selection-area {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-bottom: 1px solid #d9d9d9;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.method-select {\r\n  margin-right: 300px;\r\n  width: 250px;\r\n  font-size: 18px;\r\n  transition: box-shadow 0.3s;\r\n}\r\n\r\n.method-select:hover {\r\n  box-shadow: 0 0 5px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n/* 上半部分内容 */\r\n.upper-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 70px 150px;\r\n  background-color: #f0f2f5;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.intro-content {\r\n  text-align: center;\r\n  width: 600px;\r\n  height: 177px;\r\n  padding: 40px 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  font-family: '微软雅黑', sans-serif;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* 确保阴影一直存在 */\r\n}\r\n\r\n.intro-content:hover,\r\n.intro-content:active,\r\n.intro-content:focus {\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* 确保交互时阴影样式不变 */\r\n}\r\n\r\n.response-block {\r\n  text-align: center;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  font-size: 18px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.3s;\r\n}\r\n\r\n.response-block:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.flowchart-container {\r\n  justify-content: center; /* 水平居中 */\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.flowchart-image {\r\n  justify-content: center; /* 水平居中 */\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-input h3,\r\n.output-area h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n}\r\n\r\n.user-input pre,\r\n.output-area pre {\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  overflow-x: auto;\r\n  text-align: left; /* Ensures left alignment */\r\n  white-space: pre; /* Maintains original formatting */\r\n}\r\n\r\n.test-case {\r\n  text-align: center;\r\n  background-color: #fafafa;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.test-case:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.method-info {\r\n  text-align: center;\r\n  margin-top: 10px;\r\n  font-style: italic;\r\n  color: #555;\r\n}\r\n\r\n.response-text {\r\n  \r\n  font-size: 18px;\r\n  white-space: pre-wrap;  /* 保持换行 */\r\n  word-wrap: break-word;  /* 长单词或 URL 也换行 */\r\n  overflow-wrap: break-word;  /* 兼容性 */\r\n}\r\n\r\n/* 下半部分输入区域 */\r\n.input-area {\r\n  padding: 10px;\r\n  height: 160px;\r\n  background-color: #fff;\r\n  border-top: 1px solid #d9d9d9;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.input-row {\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  gap: 10px;\r\n  flex-wrap: nowrap;\r\n  align-items: center; /* 使按钮组垂直居中 */\r\n}\r\n\r\n.code-input {\r\n  flex: 1;\r\n  width: 100%;\r\n  height: 100px; /* Set a fixed height */\r\n  max-height: 100px; /* Fixed max-height to prevent resizing */\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  resize: none;\r\n  font-family: monospace;\r\n  white-space: pre-wrap;\r\n  overflow-y: auto; /* Enable vertical scrolling */\r\n  line-height: 1.5;\r\n  box-sizing: border-box;\r\n  text-align: left;\r\n  font-size: 18px;\r\n}\r\n\r\n\r\n.code-input:focus {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 5px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  font-size: 18px;\r\n  gap: 10px;\r\n  flex-wrap: nowrap;\r\n  flex-shrink: 0;\r\n  align-items: center; /* 使按钮内部内容垂直居中 */\r\n}\r\n\r\n.submit-button,\r\n.save-button,\r\n.clear-button {\r\n  width: 120px; /* 固定宽度 */\r\n  height: 50px; /* 固定高度 */\r\n  background-color: #ccc; /* 白灰色背景 */\r\n  font-size: 18px;\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  flex: 0 0 auto; /* 防止按钮缩放 */\r\n}\r\n\r\n.submit-button:hover,\r\n.save-button:hover,\r\n.clear-button:hover {\r\n  background-color: #bbb; /* 更深的灰色悬停 */\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* 过渡效果 */\r\n.fade-enter-active, .fade-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.fade-enter, .fade-leave-to /* .fade-leave-active for below version 2.1.8 */ {\r\n  opacity: 0;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1024px) {\r\n  .sidebar {\r\n    width: 25%;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .sidebar {\r\n    width: 100%;\r\n    height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .main-content {\r\n    width: 100%;\r\n  }\r\n\r\n  .input-row {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .button-group {\r\n    justify-content: center;\r\n  }\r\n\r\n  /* Adjust button sizes for smaller screens if necessary */\r\n  .submit-button,\r\n  .save-button,\r\n  .clear-button {\r\n    min-width: 80px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}