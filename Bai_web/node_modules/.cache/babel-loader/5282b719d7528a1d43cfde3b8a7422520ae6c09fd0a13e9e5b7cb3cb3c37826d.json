{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      records: [{\n        id: 1,\n        name: '记录1'\n      }, {\n        id: 2,\n        name: '记录2'\n      }, {\n        id: 3,\n        name: '记录3'\n      }],\n      code: '',\n      userInputs: [],\n      // 存储用户的输入内容\n      testCases: [] // 用于存储生成的测试用例\n    };\n  },\n  methods: {\n    async submitCode() {\n      if (this.code.trim() === '') return; // 防止提交空输入\n\n      // 保存用户的输入\n      this.userInputs.push(this.code);\n      try {\n        // 调用后端 API 处理用户输入的代码\n        const response = await fetch('http://127.0.0.1:5000/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code\n          })\n        });\n        if (response.ok) {\n          const result = await response.json();\n          this.testCases = result.testCases; // 假设后端返回的结果包含 testCases 字段\n          this.code = ''; // 清空输入框\n        } else {\n          console.error('Error processing code');\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n      }\n    },\n    formatInputs(inputs) {\n      // 将 inputs 对象格式化为类似 \"{'age': -346, 'b': -886}\" 的字符串\n      return JSON.stringify(inputs).replace(/\"/g, \"'\");\n    }\n  }\n};","map":{"version":3,"names":["data","records","id","name","code","userInputs","testCases","methods","submitCode","trim","push","response","fetch","method","headers","body","JSON","stringify","ok","result","json","console","error","formatInputs","inputs","replace"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 左侧菜单 -->\r\n    <aside class=\"sidebar\">\r\n      <ul>\r\n        <li v-for=\"record in records\" :key=\"record.id\">{{ record.name }}</li>\r\n      </ul>\r\n    </aside>\r\n\r\n    <!-- 右侧内容区域 -->\r\n    <main class=\"content\">\r\n      <!-- 显示用户输入的内容 -->\r\n      <div v-if=\"userInputs.length > 0\" class=\"user-input-area\">\r\n        <div v-for=\"(input, index) in userInputs\" :key=\"index\" class=\"user-input\">\r\n          <pre>你: {{ input }}</pre>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 条件渲染：当 testCases 数组为空时显示介绍文字 -->\r\n      <div v-if=\"testCases.length === 0 && userInputs.length === 0\" class=\"centered-content\">\r\n        <h1>白盒测试通</h1>\r\n        <p>你的自动测试小助手</p>\r\n        <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\r\n      </div>\r\n\r\n      <!-- 测试结果显示在输入框上方 -->\r\n      <div v-if=\"testCases.length > 0\" class=\"output-area\">\r\n        <div v-for=\"(testCase, index) in testCases\" :key=\"index\" class=\"test-case\">\r\n          <p>测试用例 {{ index + 1 }}:</p>\r\n          <p>&nbsp;&nbsp;输入: {{ formatInputs(testCase.inputs) }}</p>\r\n          <p>&nbsp;&nbsp;条件: {{ testCase.conditions }}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"input-area\">\r\n        <div class=\"input-row\">\r\n          <textarea\r\n              v-model=\"code\"\r\n              placeholder=\"请输入你要进行测试的代码\"\r\n              class=\"code-input\"\r\n          ></textarea>\r\n          <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      records: [\r\n        { id: 1, name: '记录1' },\r\n        { id: 2, name: '记录2' },\r\n        { id: 3, name: '记录3' }\r\n      ],\r\n      code: '',\r\n      userInputs: [],  // 存储用户的输入内容\r\n      testCases: [],  // 用于存储生成的测试用例\r\n    };\r\n  },\r\n  methods: {\r\n    async submitCode() {\r\n      if (this.code.trim() === '') return;  // 防止提交空输入\r\n\r\n      // 保存用户的输入\r\n      this.userInputs.push(this.code);\r\n\r\n      try {\r\n        // 调用后端 API 处理用户输入的代码\r\n        const response = await fetch('http://127.0.0.1:5000/api/process_code', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.code })\r\n        });\r\n\r\n        if (response.ok) {\r\n          const result = await response.json();\r\n          this.testCases = result.testCases;  // 假设后端返回的结果包含 testCases 字段\r\n          this.code = '';  // 清空输入框\r\n        } else {\r\n          console.error('Error processing code');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error submitting code:', error);\r\n      }\r\n    },\r\n    formatInputs(inputs) {\r\n      // 将 inputs 对象格式化为类似 \"{'age': -346, 'b': -886}\" 的字符串\r\n      return JSON.stringify(inputs).replace(/\"/g, \"'\")\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.sidebar {\r\n  width: 20%;\r\n  background-color: #f9f9f9;\r\n  padding: 20px;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar li {\r\n  padding: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; /* 垂直居中 */\r\n  align-items: center; /* 水平居中 */\r\n  padding: 50px;\r\n  text-align: center;\r\n}\r\n\r\n.centered-content {\r\n  margin-bottom: 50px;\r\n  padding: 130px;\r\n}\r\n\r\n.user-input-area {\r\n  margin-bottom: 20px;\r\n  width: 80%;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-input {\r\n  background-color: #e0e0e0;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-input pre {\r\n  white-space: pre-wrap; /* 保留换行符和空格 */\r\n  font-family: monospace; /* 使用等宽字体 */\r\n}\r\n\r\n.input-area {\r\n  margin-top: 20px; /* 可以根据需要调整 */\r\n}\r\n\r\n.input-row {\r\n  display: flex; /* 将输入框和按钮排列在同一行 */\r\n  align-items: center; /* 使按钮与输入框垂直居中对齐 */\r\n}\r\n\r\n.code-input {\r\n  width: 500px;\r\n  height: 50px;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  resize: none; /* 禁用 textarea 调整大小 */\r\n  font-family: monospace; /* 使用等宽字体 */\r\n  white-space: pre; /* 保留空白字符和换行 */\r\n  margin-right: 10px; /* 为按钮留出一些空间 */\r\n}\r\n\r\n.submit-button {\r\n  padding: 10px 20px;\r\n  background-color: #535553;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #888f88;\r\n}\r\n\r\n.output-area {\r\n  margin-bottom: 20px; /* 调整结果和输入框之间的间距 */\r\n  width: 80%;\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.test-case {\r\n  background-color: #f4f4f4;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAiDA;EACAA,KAAA;IACA;MACAC,OAAA,GACA;QAAAC,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,EACA;MACAC,IAAA;MACAC,UAAA;MAAA;MACAC,SAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,SAAAJ,IAAA,CAAAK,IAAA;;MAEA;MACA,KAAAJ,UAAA,CAAAK,IAAA,MAAAN,IAAA;MAEA;QACA;QACA,MAAAO,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAb,IAAA,OAAAA;UAAA;QACA;QAEA,IAAAO,QAAA,CAAAO,EAAA;UACA,MAAAC,MAAA,SAAAR,QAAA,CAAAS,IAAA;UACA,KAAAd,SAAA,GAAAa,MAAA,CAAAb,SAAA;UACA,KAAAF,IAAA;QACA;UACAiB,OAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACAD,OAAA,CAAAC,KAAA,2BAAAA,KAAA;MACA;IACA;IACAC,aAAAC,MAAA;MACA;MACA,OAAAR,IAAA,CAAAC,SAAA,CAAAO,MAAA,EAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}