{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      rememberMe: false,\n      // 是否记住用户\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted() {\n    // 页面加载时检查本地存储，自动填充用户名和密码\n    const savedUsername = localStorage.getItem('username');\n    const savedPassword = localStorage.getItem('password'); // 注意安全性\n    if (savedUsername) {\n      this.loginForm.username = savedUsername;\n      this.loginForm.password = savedPassword;\n      this.rememberMe = true; // 如果有存储信息，则默认勾选“记住我”\n    }\n  },\n  methods: {\n    async submitForm() {\n      this.$refs.loginForm.validate(async valid => {\n        if (valid) {\n          try {\n            // 发送登录请求\n            const response = await fetch('http://localhost:28080/api/login', {\n              // const response = await fetch('http://124.70.51.109:28080/api/login', {\n              method: 'POST',\n              body: JSON.stringify(this.loginForm),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            const result = await response.json();\n            if (result.status === 'success') {\n              // 登录成功后的处理\n              localStorage.setItem('token', result.token); // 存储 Token\n\n              if (this.rememberMe) {\n                // 如果选择了“记住我”，存储用户名和密码\n                localStorage.setItem('username', this.loginForm.username);\n                localStorage.setItem('password', this.loginForm.password); // 注意：生产环境建议加密存储\n              } else {\n                // 如果未选择“记住我”，清除存储\n                localStorage.removeItem('username');\n                localStorage.removeItem('password');\n              }\n              this.$message.success('登录成功');\n              this.$router.push('/home'); // 跳转到首页或其他页面\n            } else {\n              // 登录失败提示\n              this.$message.error(result.message || '登录失败');\n            }\n          } catch (error) {\n            console.error('登录请求出错:', error);\n            this.$message.error('服务器错误，请稍后再试');\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","loginForm","username","password","rememberMe","rules","required","message","trigger","mounted","savedUsername","localStorage","getItem","savedPassword","methods","submitForm","$refs","validate","valid","response","fetch","method","body","JSON","stringify","headers","result","json","status","setItem","token","removeItem","$message","success","$router","push","error","console"],"sources":["src/views/LoginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-box\">\r\n      <h2>用户登录</h2>\r\n      <el-form ref=\"loginForm\" :model=\"loginForm\" :rules=\"rules\" label-width=\"0px\">\r\n        <!-- 用户名 -->\r\n        <el-form-item prop=\"username\">\r\n          <el-input class=\"el-input-user\" v-model=\"loginForm.username\" placeholder=\"请输入用户名\">\r\n            <template #prefix>\r\n              <img class=\"icon\" src=\"@/assets/用户.png\" />\r\n            </template>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 密码 -->\r\n        <el-form-item prop=\"password\">\r\n          <el-input class=\"el-input-pass\" v-model=\"loginForm.password\" type=\"password\" placeholder=\"请输入密码\">\r\n            <template #prefix>\r\n              <img class=\"icon\" src=\"@/assets/密码.png\" />\r\n            </template>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 记住我复选框 -->\r\n        <el-form-item>\r\n          <div class=\"remember-me\">\r\n            <el-checkbox v-model=\"rememberMe\">记住我</el-checkbox>\r\n          </div>\r\n        </el-form-item>\r\n\r\n        <!-- 登录按钮 -->\r\n        <el-button class=\"el-button-login\" type=\"primary\" @click=\"submitForm\">登录</el-button>\r\n        <div class=\"register-link\">\r\n          没有账号？ <router-link to=\"/register\">去注册</router-link>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      rememberMe: false, // 是否记住用户\r\n      rules: {\r\n        username: [{required: true, message: '请输入用户名', trigger: 'blur'}],\r\n        password: [{required: true, message: '请输入密码', trigger: 'blur'}],\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    // 页面加载时检查本地存储，自动填充用户名和密码\r\n    const savedUsername = localStorage.getItem('username');\r\n    const savedPassword = localStorage.getItem('password'); // 注意安全性\r\n    if (savedUsername) {\r\n      this.loginForm.username = savedUsername;\r\n      this.loginForm.password = savedPassword;\r\n      this.rememberMe = true; // 如果有存储信息，则默认勾选“记住我”\r\n    }\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n      this.$refs.loginForm.validate(async (valid) => {\r\n        if (valid) {\r\n          try {\r\n            // 发送登录请求\r\n            const response = await fetch('http://localhost:28080/api/login', {\r\n            // const response = await fetch('http://124.70.51.109:28080/api/login', {\r\n              method: 'POST',\r\n              body: JSON.stringify(this.loginForm),\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n            });\r\n            const result = await response.json();\r\n\r\n            if (result.status === 'success') {\r\n              // 登录成功后的处理\r\n              localStorage.setItem('token', result.token); // 存储 Token\r\n\r\n              if (this.rememberMe) {\r\n                // 如果选择了“记住我”，存储用户名和密码\r\n                localStorage.setItem('username', this.loginForm.username);\r\n                localStorage.setItem('password', this.loginForm.password); // 注意：生产环境建议加密存储\r\n              } else {\r\n                // 如果未选择“记住我”，清除存储\r\n                localStorage.removeItem('username');\r\n                localStorage.removeItem('password');\r\n              }\r\n              this.$message.success('登录成功');\r\n              this.$router.push('/home'); // 跳转到首页或其他页面\r\n            } else {\r\n              // 登录失败提示\r\n              this.$message.error(result.message || '登录失败');\r\n            }\r\n          } catch (error) {\r\n            console.error('登录请求出错:', error);\r\n            this.$message.error('服务器错误，请稍后再试');\r\n          }\r\n        }\r\n      });\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nh2 {\r\n  font-family: '方正清刻本悦宋简体', sans-serif; /* 使用微软雅黑字体，您可以更换为其他字体 */\r\n  color: #333333; /* 颜色设置为深灰色，可以根据需要调整 */\r\n  font-size: 30px; /* 字体大小调整为24像素 */\r\n  font-weight: normal; /* 字体加粗 */\r\n  margin-bottom: 15px; /* 增加下方的间距 */\r\n}\r\n\r\n.login-container {\r\n  background-image: url('../assets/水墨背景蒙版.png');\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-size: cover; /* 背景图像覆盖整个容器 */\r\n}\r\n\r\n.login-box {\r\n  background-color: rgba(255, 255, 255, 0.8); /* 调整为半透明白色背景 */\r\n  padding: 40px; /* 内边距稍微减少使得整体更紧凑 */\r\n  border-radius: 12px; /* 圆角增加，更加柔和 */\r\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2); /* 增强阴影效果 */\r\n  width: 300px; /* 调整宽度，使其看起来更符合第二张图片的样式 */\r\n  height: 310px;\r\n  text-align: center;\r\n  font-size: 18px; /* 保持字体大小一致 */\r\n}\r\n\r\n.icon {\r\n  width: 24px;\r\n  height: 24px;\r\n  position: relative; /* 使其可以相对于默认位置进行偏移 */\r\n  top: 5px; /* 向下偏移 2 像素 */\r\n  left: 0px; /* 向左偏移 4 像素 */\r\n}\r\n\r\n.el-input-user {\r\n  height: 45px; /* 输入框稍微缩小高度 */\r\n  font-size: 16px; /* 调整字体大小 */\r\n}\r\n\r\n.el-input-pass {\r\n  height: 45px; /* 输入框稍微缩小高度 */\r\n  font-size: 16px; /* 调整字体大小 */\r\n}\r\n\r\n.el-button-login {\r\n  height: 45px; /* 调整按钮的高度 */\r\n  font-size: 18px; /* 调整按钮文字的字体大小 */\r\n  padding: 0 20px; /* 调整按钮内边距 */\r\n  margin-top: -20px; /* 增加顶部间距 */\r\n  background-color: #a64242; /* 调整按钮颜色为类似深红色 */\r\n  border: none; /* 移除边框 */\r\n}\r\n\r\n.el-button-login:hover {\r\n  background-color: #8c3737; /* 调整鼠标悬浮时的按钮颜色 */\r\n}\r\n\r\n.remember-me {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: -10px;\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.remember-me .el-checkbox {\r\n  margin-right: 8px; /* 复选框与文字的间距 */\r\n}\r\n\r\n.remember-me .checkbox .el-checkbox__input.is-checked + .el-checkbox__label {\r\n  color: #8c3737; /* 当复选框被选中时，文字变红 */\r\n}\r\n\r\n.register-link {\r\n  margin-top: 10px; /* 减少顶部的间距 */\r\n  color: #555;\r\n}\r\n\r\n.register-link a {\r\n  color: #a64242; /* 调整链接颜色，保持一致 */\r\n  text-decoration: none; /* 移除下划线 */\r\n}\r\n\r\n.register-link a:hover {\r\n  text-decoration: underline; /* 鼠标悬浮时显示下划线 */\r\n}\r\n</style>\r\n"],"mappings":";AAyCA;EACAA,KAAA;IACA;MACAC,SAAA;QACAC,QAAA;QACAC,QAAA;MACA;MACAC,UAAA;MAAA;MACAC,KAAA;QACAH,QAAA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAL,QAAA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA,MAAAC,aAAA,GAAAC,YAAA,CAAAC,OAAA;IACA,MAAAC,aAAA,GAAAF,YAAA,CAAAC,OAAA;IACA,IAAAF,aAAA;MACA,KAAAT,SAAA,CAAAC,QAAA,GAAAQ,aAAA;MACA,KAAAT,SAAA,CAAAE,QAAA,GAAAU,aAAA;MACA,KAAAT,UAAA;IACA;EACA;EACAU,OAAA;IACA,MAAAC,WAAA;MACA,KAAAC,KAAA,CAAAf,SAAA,CAAAgB,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA;YACA,MAAAC,QAAA,SAAAC,KAAA;cACA;cACAC,MAAA;cACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,MAAAvB,SAAA;cACAwB,OAAA;gBACA;cACA;YACA;YACA,MAAAC,MAAA,SAAAP,QAAA,CAAAQ,IAAA;YAEA,IAAAD,MAAA,CAAAE,MAAA;cACA;cACAjB,YAAA,CAAAkB,OAAA,UAAAH,MAAA,CAAAI,KAAA;;cAEA,SAAA1B,UAAA;gBACA;gBACAO,YAAA,CAAAkB,OAAA,kBAAA5B,SAAA,CAAAC,QAAA;gBACAS,YAAA,CAAAkB,OAAA,kBAAA5B,SAAA,CAAAE,QAAA;cACA;gBACA;gBACAQ,YAAA,CAAAoB,UAAA;gBACApB,YAAA,CAAAoB,UAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;cACA;cACA,KAAAH,QAAA,CAAAI,KAAA,CAAAV,MAAA,CAAAnB,OAAA;YACA;UACA,SAAA6B,KAAA;YACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;YACA,KAAAJ,QAAA,CAAAI,KAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}