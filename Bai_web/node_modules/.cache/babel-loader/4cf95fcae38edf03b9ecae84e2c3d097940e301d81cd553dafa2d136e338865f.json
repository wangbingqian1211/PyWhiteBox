{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      code: '',\n      responseBlocks: [],\n      // Current output content\n      selectedOption: 'option1',\n      options: [{\n        value: 'option1',\n        label: '基本路径测试'\n      }, {\n        value: 'option2',\n        label: '路径覆盖测试'\n      }, {\n        value: 'option3',\n        label: 'GPT测试'\n      }],\n      savedRecords: [],\n      // Saved output records\n      currentRecordId: null // Currently displayed record ID\n    };\n  },\n  methods: {\n    autoResize() {\n      const element = this.$refs.codeInput;\n      element.style.height = 'auto';\n      element.style.height = element.scrollHeight + 'px';\n    },\n    async submitCode() {\n      if (this.code.trim() === '') return;\n      const currentCode = this.code;\n      try {\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code,\n            option: this.selectedOption\n          })\n        });\n        if (processResponse.ok) {\n          const result = await processResponse.json();\n          const newBlock = {\n            code: currentCode,\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`,\n            selectedOption: this.selectedOption // Save selected test method\n          };\n          if (this.selectedOption === 'option1' || this.selectedOption === 'option2') {\n            newBlock.testCases = result.testCases;\n          } else if (this.selectedOption === 'option3') {\n            newBlock.responseText = result.responseText;\n          }\n          this.responseBlocks.push(newBlock);\n          this.code = '';\n          this.resetTextareaHeight();\n        } else {\n          const error = await processResponse.json();\n          console.error('Error processing code:', error.error);\n          alert(`Error: ${error.error}`);\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n        alert('提交代码时发生错误，请检查控制台以获取详细信息。');\n      }\n    },\n    saveRecord() {\n      if (this.responseBlocks.length === 0) return; // Do not save if there's no output\n      const newRecord = {\n        id: Date.now(),\n        // Use timestamp as a unique ID\n        name: `记录 ${this.savedRecords.length + 1}`,\n        responseBlocks: [...this.responseBlocks] // Save current output content\n      };\n      this.savedRecords.push(newRecord);\n      this.currentRecordId = newRecord.id;\n      alert('记录已保存');\n    },\n    loadRecord(recordId) {\n      const record = this.savedRecords.find(r => r.id === recordId);\n      if (record) {\n        this.currentRecordId = record.id;\n        this.responseBlocks = [...record.responseBlocks];\n      }\n    },\n    deleteRecord(recordId) {\n      const index = this.savedRecords.findIndex(r => r.id === recordId);\n      if (index !== -1) {\n        if (confirm('确定要删除此记录吗？')) {\n          this.savedRecords.splice(index, 1);\n          // If the deleted record is currently displayed, clear the display\n          if (this.currentRecordId === recordId) {\n            this.currentRecordId = null;\n            this.responseBlocks = [];\n          }\n          alert('记录已删除');\n        }\n      }\n    },\n    async downloadRecord(record) {\n      // Create an HTML string containing images and text content\n      let htmlContent = `\n        <html>\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>${record.name}</title>\n            <style>\n              body { font-family: Arial, sans-serif; padding: 20px; }\n              .section { margin-bottom: 20px; }\n              .section img { max-width: 100%; height: auto; }\n              .section pre { background-color: #f4f4f4; padding: 10px; border-radius: 4px; }\n              .test-case { background-color: #f4f4f4; padding: 10px; border-radius: 4px; margin-bottom: 10px; }\n              .test-case p { margin: 5px 0; }\n              h1 { text-align: center; }\n              h2 { color: #333; }\n            </style>\n          </head>\n          <body>\n            <h1>${record.name}</h1>\n            <p><strong>测试方法:</strong> ${this.getOptionLabel(record.responseBlocks[0]?.selectedOption)}</p>\n      `;\n      for (const block of record.responseBlocks) {\n        htmlContent += `<div class=\"section\">`;\n\n        // Add flowchart image\n        if (block.flowchartPath) {\n          try {\n            const imageBase64 = await this.convertImageToBase64(block.flowchartPath);\n            htmlContent += `<h2>流程图:</h2>`;\n            htmlContent += `<img src=\"data:image/png;base64,${imageBase64}\" alt=\"流程图\"/>`;\n          } catch (error) {\n            console.error('Error fetching image:', error);\n            htmlContent += `<p>流程图无法加载。</p>`;\n          }\n        }\n\n        // Add code\n        htmlContent += `<h2>代码:</h2>`;\n        htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.code)}</pre>`;\n\n        // Add test cases or response text\n        if (block.testCases && block.testCases.length) {\n          htmlContent += `<h2>测试用例:</h2>`;\n          for (const [i, testCase] of block.testCases.entries()) {\n            htmlContent += `\n              <div class=\"test-case\">\n                <p><strong>测试用例 ${i + 1}:</strong></p>\n                <p>输入: ${this.formatInputs(testCase.inputs)}</p>\n                <p>条件: ${testCase.conditions.join(', ')}</p>\n                <p><strong>输出:</strong> ${testCase.output || '无'}</p>\n                ${testCase.error ? `<p><strong>错误:</strong> ${testCase.error}</p>` : ''}\n              </div>\n            `;\n          }\n        } else if (block.responseText) {\n          htmlContent += `<h2>响应文本:</h2>`;\n          htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.responseText)}</pre>`;\n        }\n        htmlContent += `</div>`;\n      }\n      htmlContent += `\n          </body>\n        </html>\n      `;\n\n      // Create a Blob and trigger download\n      const blob = new Blob([htmlContent], {\n        type: 'application/msword'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${record.name}.doc`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    // Convert image URL to Base64\n    async convertImageToBase64(url) {\n      const response = await fetch(url, {\n        mode: 'cors'\n      });\n      const blob = await response.blob();\n      return await this.blobToBase64(blob);\n    },\n    // Convert Blob to Base64\n    blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const base64data = reader.result.split(',')[1]; // Remove prefix\n          resolve(base64data);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    },\n    clearScreen() {\n      this.responseBlocks = []; // Clear current output content\n    },\n    resetTextareaHeight() {\n      const element = this.$refs.codeInput;\n      element.style.height = 'auto';\n    },\n    formatInputs(inputs) {\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");\n    },\n    // Escape HTML special characters\n    escapeHtml(text) {\n      const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n      return text.replace(/[&<>\"']/g, function (m) {\n        return map[m];\n      });\n    },\n    // Get label for the selected option\n    getOptionLabel(value) {\n      const option = this.options.find(opt => opt.value === value);\n      return option ? option.label : value;\n    }\n  }\n};","map":{"version":3,"names":["data","code","responseBlocks","selectedOption","options","value","label","savedRecords","currentRecordId","methods","autoResize","element","$refs","codeInput","style","height","scrollHeight","submitCode","trim","currentCode","processResponse","fetch","method","headers","body","JSON","stringify","option","ok","result","json","newBlock","flowchartPath","testCases","responseText","push","resetTextareaHeight","error","console","alert","saveRecord","length","newRecord","id","Date","now","name","loadRecord","recordId","record","find","r","deleteRecord","index","findIndex","confirm","splice","downloadRecord","htmlContent","getOptionLabel","block","imageBase64","convertImageToBase64","escapeHtml","i","testCase","entries","formatInputs","inputs","conditions","join","output","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","response","mode","blobToBase64","Promise","resolve","reject","reader","FileReader","onloadend","base64data","split","onerror","readAsDataURL","clearScreen","replace","text","map","m","opt"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- Sidebar -->\r\n    <aside class=\"sidebar\">\r\n      <h2 class=\"sidebar-title\">保存的记录</h2>\r\n      <ul>\r\n        <li v-for=\"record in savedRecords\" :key=\"record.id\" class=\"record-item\">\r\n          <div @click=\"loadRecord(record.id)\" class=\"record-name\">\r\n            {{ record.name }}\r\n          </div>\r\n          <div class=\"record-actions\">\r\n            <button @click.stop=\"downloadRecord(record)\" class=\"action-button download-button\">下载</button>\r\n            <button @click.stop=\"deleteRecord(record.id)\" class=\"action-button delete-button\">删除</button>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </aside>\r\n\r\n    <!-- Main Content Area -->\r\n    <main class=\"main-content\">\r\n      <!-- Selection Area -->\r\n      <div class=\"selection-area\">\r\n        <el-select v-model=\"selectedOption\" placeholder=\"请选择测试方法\" class=\"method-select\">\r\n          <el-option\r\n              v-for=\"item in options\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n          </el-option>\r\n        </el-select>\r\n      </div>\r\n\r\n      <!-- Upper Content: User Inputs and Test Results -->\r\n      <div class=\"upper-content\">\r\n        <transition-group name=\"fade\" tag=\"div\">\r\n          <div v-for=\"(block, index) in responseBlocks\" :key=\"index\" class=\"response-block\">\r\n            <div v-if=\"block.flowchartPath\" class=\"flowchart-container\">\r\n              <img :src=\"block.flowchartPath\" alt=\"流程图\" class=\"flowchart-image\"/>\r\n            </div>\r\n            <div class=\"user-input\">\r\n              <h3>代码:</h3>\r\n              <pre>{{ block.code }}</pre>\r\n            </div>\r\n            <div class=\"output-area\">\r\n              <div v-if=\"block.testCases && block.testCases.length\">\r\n                <h3>测试用例:</h3>\r\n                <div v-for=\"(testCase, i) in block.testCases\" :key=\"i\" class=\"test-case\">\r\n                  <p><strong>测试用例 {{ i + 1 }}:</strong></p>\r\n                  <p>输入: {{ formatInputs(testCase.inputs) }}</p>\r\n                  <p>条件: {{ testCase.conditions.join(', ') }}</p>\r\n                  <p v-if=\"testCase.output\"><strong>输出:</strong> {{ testCase.output }}</p>\r\n                  <p v-if=\"testCase.error\" class=\"error-text\"><strong>错误:</strong> {{ testCase.error }}</p>\r\n                </div>\r\n              </div>\r\n              <div v-else-if=\"block.responseText\">\r\n                <h3>响应文本:</h3>\r\n                <pre class=\"response-text\">{{ block.responseText }}</pre>\r\n              </div>\r\n              <div v-if=\"block.selectedOption\" class=\"method-info\">\r\n                <p><strong>测试方法:</strong> {{ getOptionLabel(block.selectedOption) }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </transition-group>\r\n        <div v-if=\"responseBlocks.length === 0\" class=\"intro-content\">\r\n          <h1>白盒测试通</h1>\r\n          <p>你的自动测试小助手</p>\r\n          <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Input Area -->\r\n      <div class=\"input-area\">\r\n        <div class=\"input-row\">\r\n          <textarea\r\n              v-model=\"code\"\r\n              placeholder=\"请输入你要进行测试的代码\"\r\n              class=\"code-input\"\r\n              @input=\"autoResize\"\r\n              ref=\"codeInput\"\r\n          ></textarea>\r\n          <div class=\"button-group\">\r\n            <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\r\n            <button @click=\"saveRecord\" class=\"save-button\">保存记录</button>\r\n            <button @click=\"clearScreen\" class=\"clear-button\">清空屏幕</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      code: '',\r\n      responseBlocks: [],  // Current output content\r\n      selectedOption: 'option1',\r\n      options: [\r\n        { value: 'option1', label: '基本路径测试' },\r\n        { value: 'option2', label: '路径覆盖测试' },\r\n        { value: 'option3', label: 'GPT测试' }\r\n      ],\r\n      savedRecords: [], // Saved output records\r\n      currentRecordId: null // Currently displayed record ID\r\n    };\r\n  },\r\n  methods: {\r\n    autoResize() {\r\n      const element = this.$refs.codeInput;\r\n      element.style.height = 'auto';\r\n      element.style.height = element.scrollHeight + 'px';\r\n    },\r\n    async submitCode() {\r\n      if (this.code.trim() === '') return;\r\n      const currentCode = this.code;\r\n      try {\r\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.code, option: this.selectedOption })\r\n        });\r\n        if (processResponse.ok) {\r\n          const result = await processResponse.json();\r\n          const newBlock = {\r\n            code: currentCode,\r\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`,\r\n            selectedOption: this.selectedOption // Save selected test method\r\n          };\r\n          if (this.selectedOption === 'option1' || this.selectedOption === 'option2') {\r\n            newBlock.testCases = result.testCases;\r\n          } else if (this.selectedOption === 'option3') {\r\n            newBlock.responseText = result.responseText;\r\n          }\r\n          this.responseBlocks.push(newBlock);\r\n          this.code = '';\r\n          this.resetTextareaHeight();\r\n        } else {\r\n          const error = await processResponse.json();\r\n          console.error('Error processing code:', error.error);\r\n          alert(`Error: ${error.error}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error submitting code:', error);\r\n        alert('提交代码时发生错误，请检查控制台以获取详细信息。');\r\n      }\r\n    },\r\n    saveRecord() {\r\n      if (this.responseBlocks.length === 0) return; // Do not save if there's no output\r\n      const newRecord = {\r\n        id: Date.now(), // Use timestamp as a unique ID\r\n        name: `记录 ${this.savedRecords.length + 1}`,\r\n        responseBlocks: [...this.responseBlocks] // Save current output content\r\n      };\r\n      this.savedRecords.push(newRecord);\r\n      this.currentRecordId = newRecord.id;\r\n      alert('记录已保存');\r\n    },\r\n    loadRecord(recordId) {\r\n      const record = this.savedRecords.find(r => r.id === recordId);\r\n      if (record) {\r\n        this.currentRecordId = record.id;\r\n        this.responseBlocks = [...record.responseBlocks];\r\n      }\r\n    },\r\n    deleteRecord(recordId) {\r\n      const index = this.savedRecords.findIndex(r => r.id === recordId);\r\n      if (index !== -1) {\r\n        if (confirm('确定要删除此记录吗？')) {\r\n          this.savedRecords.splice(index, 1);\r\n          // If the deleted record is currently displayed, clear the display\r\n          if (this.currentRecordId === recordId) {\r\n            this.currentRecordId = null;\r\n            this.responseBlocks = [];\r\n          }\r\n          alert('记录已删除');\r\n        }\r\n      }\r\n    },\r\n    async downloadRecord(record) {\r\n      // Create an HTML string containing images and text content\r\n      let htmlContent = `\r\n        <html>\r\n          <head>\r\n            <meta charset=\"UTF-8\">\r\n            <title>${record.name}</title>\r\n            <style>\r\n              body { font-family: Arial, sans-serif; padding: 20px; }\r\n              .section { margin-bottom: 20px; }\r\n              .section img { max-width: 100%; height: auto; }\r\n              .section pre { background-color: #f4f4f4; padding: 10px; border-radius: 4px; }\r\n              .test-case { background-color: #f4f4f4; padding: 10px; border-radius: 4px; margin-bottom: 10px; }\r\n              .test-case p { margin: 5px 0; }\r\n              h1 { text-align: center; }\r\n              h2 { color: #333; }\r\n            </style>\r\n          </head>\r\n          <body>\r\n            <h1>${record.name}</h1>\r\n            <p><strong>测试方法:</strong> ${this.getOptionLabel(record.responseBlocks[0]?.selectedOption)}</p>\r\n      `;\r\n\r\n      for (const block of record.responseBlocks) {\r\n        htmlContent += `<div class=\"section\">`;\r\n\r\n        // Add flowchart image\r\n        if (block.flowchartPath) {\r\n          try {\r\n            const imageBase64 = await this.convertImageToBase64(block.flowchartPath);\r\n            htmlContent += `<h2>流程图:</h2>`;\r\n            htmlContent += `<img src=\"data:image/png;base64,${imageBase64}\" alt=\"流程图\"/>`;\r\n          } catch (error) {\r\n            console.error('Error fetching image:', error);\r\n            htmlContent += `<p>流程图无法加载。</p>`;\r\n          }\r\n        }\r\n\r\n        // Add code\r\n        htmlContent += `<h2>代码:</h2>`;\r\n        htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.code)}</pre>`;\r\n\r\n        // Add test cases or response text\r\n        if (block.testCases && block.testCases.length) {\r\n          htmlContent += `<h2>测试用例:</h2>`;\r\n          for (const [i, testCase] of block.testCases.entries()) {\r\n            htmlContent += `\r\n              <div class=\"test-case\">\r\n                <p><strong>测试用例 ${i + 1}:</strong></p>\r\n                <p>输入: ${this.formatInputs(testCase.inputs)}</p>\r\n                <p>条件: ${testCase.conditions.join(', ')}</p>\r\n                <p><strong>输出:</strong> ${testCase.output || '无'}</p>\r\n                ${testCase.error ? `<p><strong>错误:</strong> ${testCase.error}</p>` : ''}\r\n              </div>\r\n            `;\r\n          }\r\n        } else if (block.responseText) {\r\n          htmlContent += `<h2>响应文本:</h2>`;\r\n          htmlContent += `<pre style=\"text-align: left;\">${this.escapeHtml(block.responseText)}</pre>`;\r\n        }\r\n\r\n        htmlContent += `</div>`;\r\n      }\r\n\r\n      htmlContent += `\r\n          </body>\r\n        </html>\r\n      `;\r\n\r\n      // Create a Blob and trigger download\r\n      const blob = new Blob([htmlContent], { type: 'application/msword' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${record.name}.doc`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n    },\r\n    // Convert image URL to Base64\r\n    async convertImageToBase64(url) {\r\n      const response = await fetch(url, { mode: 'cors' });\r\n      const blob = await response.blob();\r\n      return await this.blobToBase64(blob);\r\n    },\r\n    // Convert Blob to Base64\r\n    blobToBase64(blob) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          const base64data = reader.result.split(',')[1]; // Remove prefix\r\n          resolve(base64data);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    },\r\n    clearScreen() {\r\n      this.responseBlocks = []; // Clear current output content\r\n    },\r\n    resetTextareaHeight() {\r\n      const element = this.$refs.codeInput;\r\n      element.style.height = 'auto';\r\n    },\r\n    formatInputs(inputs) {\r\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");\r\n    },\r\n    // Escape HTML special characters\r\n    escapeHtml(text) {\r\n      const map = {\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#039;'\r\n      };\r\n      return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\r\n    },\r\n    // Get label for the selected option\r\n    getOptionLabel(value) {\r\n      const option = this.options.find(opt => opt.value === value);\r\n      return option ? option.label : value;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Basic Layout */\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  background-color: #f0f2f5;\r\n  color: #333;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n/* Sidebar */\r\n.sidebar {\r\n  width: 20%;\r\n  background-color: #f9f9f9; /* Light gray background */\r\n  color: #333;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.sidebar-title {\r\n  font-size: 1.5em;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.record-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #fff; /* Light record box */\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  cursor: pointer;\r\n}\r\n\r\n.record-item:hover {\r\n  background-color: #e6f7ff; /* Light blue hover */\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.record-name {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.record-actions {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.action-button {\r\n  padding: 5px 10px;\r\n  background-color: #ccc; /* Light gray button background */\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.download-button {\r\n  background-color: #ddd; /* Light gray for download */\r\n}\r\n\r\n.delete-button {\r\n  background-color: #ccc; /* Light gray for delete */\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #bbb; /* Darker gray hover */\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* Main Content Area */\r\n.main-content {\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n/* Selection Area */\r\n.selection-area {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-bottom: 1px solid #d9d9d9;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.method-select {\r\n  width: 250px;\r\n  transition: box-shadow 0.3s;\r\n}\r\n\r\n.method-select:hover {\r\n  box-shadow: 0 0 5px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n/* Upper Content */\r\n.upper-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  background-color: #f0f2f5;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.intro-content {\r\n  text-align: center;\r\n  padding: 100px 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.response-block {\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.3s;\r\n}\r\n\r\n.response-block:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.flowchart-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.flowchart-image {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-input h3,\r\n.output-area h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n}\r\n\r\n.user-input pre,\r\n.output-area pre {\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  overflow-x: auto;\r\n  text-align: left; /* Ensure left alignment */\r\n  white-space: pre; /* Maintain original formatting */\r\n}\r\n\r\n.test-case {\r\n  background-color: #fafafa;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.test-case:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.method-info {\r\n  margin-top: 10px;\r\n  font-style: italic;\r\n  color: #555;\r\n}\r\n\r\n/* Error Text */\r\n.error-text {\r\n  color: red;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Response Text */\r\n.response-text {\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  overflow-x: auto;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n/* Input Area */\r\n.input-area {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-top: 1px solid #d9d9d9;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.input-row {\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  gap: 10px;\r\n  flex-wrap: nowrap; /* Prevent buttons from wrapping */\r\n}\r\n\r\n.code-input {\r\n  flex: 1;\r\n  width: 100%;\r\n  height: auto;\r\n  max-height: 300px;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  resize: none;\r\n  font-family: monospace;\r\n  white-space: pre-wrap;\r\n  overflow-y: auto;\r\n  line-height: 1.5;\r\n  box-sizing: border-box;\r\n  text-align: left; /* Ensure left alignment */\r\n}\r\n\r\n.code-input:focus {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 5px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 10px;\r\n  flex-wrap: nowrap; /* Prevent buttons from wrapping */\r\n  flex-shrink: 0; /* Prevent buttons from shrinking */\r\n}\r\n\r\n.submit-button,\r\n.save-button,\r\n.clear-button {\r\n  padding: 10px 20px;\r\n  background-color: #ccc; /* Light gray background */\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  font-size: 1em;\r\n  min-width: 100px; /* Ensure buttons have a minimum width */\r\n  flex: 0 0 auto; /* Prevent buttons from growing or shrinking */\r\n}\r\n\r\n.submit-button:hover,\r\n.save-button:hover,\r\n.clear-button:hover {\r\n  background-color: #bbb; /* Darker gray hover */\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* Transition Effects */\r\n.fade-enter-active, .fade-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.fade-enter, .fade-leave-to {\r\n  opacity: 0;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 1024px) {\r\n  .sidebar {\r\n    width: 25%;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .sidebar {\r\n    width: 100%;\r\n    height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .main-content {\r\n    width: 100%;\r\n  }\r\n\r\n  .input-row {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .button-group {\r\n    justify-content: center;\r\n  }\r\n\r\n  /* Adjust button sizes for smaller screens if necessary */\r\n  .submit-button,\r\n  .save-button,\r\n  .clear-button {\r\n    min-width: 80px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}