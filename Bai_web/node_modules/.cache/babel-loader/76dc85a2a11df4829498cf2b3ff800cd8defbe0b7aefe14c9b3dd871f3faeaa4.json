{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      code: '',\n      responseBlocks: [],\n      // 当前显示的输出内容\n      selectedOption: 'option1',\n      options: [{\n        value: 'option1',\n        label: '基本路径测试'\n      }, {\n        value: 'option2',\n        label: '路径覆盖测试'\n      }, {\n        value: 'option3',\n        label: 'GPT测试'\n      }],\n      savedRecords: [],\n      // 存储保存的输出记录\n      currentRecordId: null // 当前显示的记录ID\n    };\n  },\n  methods: {\n    async submitCode() {\n      if (this.code.trim() === '') return;\n      const currentCode = this.code;\n      try {\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code,\n            option: this.selectedOption\n          })\n        });\n        if (processResponse.ok) {\n          const result = await processResponse.json();\n          const newBlock = {\n            code: currentCode,\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`,\n            selectedOption: this.selectedOption // 保存选中的测试方法\n          };\n          if (this.selectedOption === 'option1' || this.selectedOption === 'option2') {\n            newBlock.testCases = result.testCases;\n          } else if (this.selectedOption === 'option3') {\n            newBlock.responseText = result.responseText;\n          }\n          this.responseBlocks.push(newBlock);\n          this.code = '';\n        } else {\n          const error = await processResponse.json();\n          console.error('Error processing code:', error.error);\n          alert(`Error: ${error.error}`);\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n        alert('提交代码时发生错误，请检查控制台以获取详细信息。');\n      }\n    },\n    saveRecord() {\n      if (this.responseBlocks.length === 0) return;\n      const newRecord = {\n        id: Date.now(),\n        name: `记录 ${this.savedRecords.length + 1}`,\n        responseBlocks: [...this.responseBlocks]\n      };\n      this.savedRecords.push(newRecord);\n      this.currentRecordId = newRecord.id;\n      alert('记录已保存');\n    },\n    loadRecord(recordId) {\n      const record = this.savedRecords.find(r => r.id === recordId);\n      if (record) {\n        this.currentRecordId = record.id;\n        this.responseBlocks = [...record.responseBlocks];\n      }\n    },\n    deleteRecord(recordId) {\n      const index = this.savedRecords.findIndex(r => r.id === recordId);\n      if (index !== -1) {\n        if (confirm('确定要删除此记录吗？')) {\n          this.savedRecords.splice(index, 1);\n          if (this.currentRecordId === recordId) {\n            this.currentRecordId = null;\n            this.responseBlocks = [];\n          }\n          alert('记录已删除');\n        }\n      }\n    },\n    async downloadRecord(record) {\n      // 下载逻辑...\n    },\n    clearScreen() {\n      this.responseBlocks = [];\n    },\n    formatInputs(inputs) {\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");\n    },\n    escapeHtml(text) {\n      const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n      return text.replace(/[&<>\"']/g, function (m) {\n        return map[m];\n      });\n    },\n    getOptionLabel(value) {\n      const option = this.options.find(opt => opt.value === value);\n      return option ? option.label : value;\n    }\n  }\n};","map":{"version":3,"names":["data","code","responseBlocks","selectedOption","options","value","label","savedRecords","currentRecordId","methods","submitCode","trim","currentCode","processResponse","fetch","method","headers","body","JSON","stringify","option","ok","result","json","newBlock","flowchartPath","testCases","responseText","push","error","console","alert","saveRecord","length","newRecord","id","Date","now","name","loadRecord","recordId","record","find","r","deleteRecord","index","findIndex","confirm","splice","downloadRecord","clearScreen","formatInputs","inputs","replace","escapeHtml","text","map","m","getOptionLabel","opt"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 左侧菜单 -->\r\n    <aside class=\"sidebar\">\r\n      <h2 class=\"sidebar-title\">保存的记录</h2>\r\n      <ul>\r\n        <li v-for=\"record in savedRecords\" :key=\"record.id\" class=\"record-item\">\r\n          <div @click=\"loadRecord(record.id)\" class=\"record-name\">\r\n            {{ record.name }}\r\n          </div>\r\n          <div class=\"record-actions\">\r\n            <button @click.stop=\"downloadRecord(record)\" class=\"action-button download-button\">下载</button>\r\n            <button @click.stop=\"deleteRecord(record.id)\" class=\"action-button delete-button\">删除</button>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </aside>\r\n    <!-- 右侧内容区域 -->\r\n    <main class=\"main-content\">\r\n      <!-- 选择方法的独立区域 -->\r\n      <div class=\"selection-area\">\r\n        <el-select v-model=\"selectedOption\" placeholder=\"请选择测试方法\" class=\"method-select\">\r\n          <el-option\r\n              v-for=\"item in options\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n          </el-option>\r\n        </el-select>\r\n      </div>\r\n\r\n      <!-- 上半部分，包含用户输入显示和测试结果 -->\r\n      <div class=\"upper-content\">\r\n        <transition-group name=\"fade\" tag=\"div\">\r\n          <div v-for=\"(block, index) in responseBlocks\" :key=\"index\" class=\"response-block\">\r\n            <div v-if=\"block.flowchartPath\" class=\"flowchart-container\">\r\n              <img :src=\"block.flowchartPath\" alt=\"流程图\" class=\"flowchart-image\"/>\r\n            </div>\r\n            <div class=\"user-input\">\r\n              <h3>代码:</h3>\r\n              <pre>{{ block.code }}</pre>\r\n            </div>\r\n            <div class=\"output-area\">\r\n              <div v-if=\"block.testCases && block.testCases.length\">\r\n                <h3>测试用例:</h3>\r\n                <div v-for=\"(testCase, i) in block.testCases\" :key=\"i\" class=\"test-case\">\r\n                  <p><strong>测试用例 {{ i + 1 }}:</strong></p>\r\n                  <p>输入: {{ formatInputs(testCase.inputs) }}</p>\r\n                  <p>条件: {{ testCase.conditions }}</p>\r\n                </div>\r\n              </div>\r\n              <div v-else-if=\"block.responseText\">\r\n                <h3>响应文本:</h3>\r\n                <pre class=\"response-text\">{{ block.responseText }}</pre>\r\n              </div>\r\n              <div v-if=\"block.selectedOption\" class=\"method-info\">\r\n                <p><strong>测试方法:</strong> {{ getOptionLabel(block.selectedOption) }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </transition-group>\r\n        <div v-if=\"responseBlocks.length === 0\" class=\"intro-content\">\r\n          <h1>白盒测试通</h1>\r\n          <p>你的自动测试小助手</p>\r\n          <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 下半部分，固定的输入框 -->\r\n      <div class=\"input-area\">\r\n        <div class=\"input-row\">\r\n          <textarea\r\n              v-model=\"code\"\r\n              placeholder=\"请输入你要进行测试的代码\"\r\n              class=\"code-input\"\r\n              ref=\"codeInput\"\r\n          ></textarea>\r\n          <div class=\"button-group\">\r\n            <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\r\n            <button @click=\"saveRecord\" class=\"save-button\">保存记录</button>\r\n            <button @click=\"clearScreen\" class=\"clear-button\">清空屏幕</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      code: '',\r\n      responseBlocks: [],  // 当前显示的输出内容\r\n      selectedOption: 'option1',\r\n      options: [\r\n        { value: 'option1', label: '基本路径测试' },\r\n        { value: 'option2', label: '路径覆盖测试' },\r\n        { value: 'option3', label: 'GPT测试' }\r\n      ],\r\n      savedRecords: [], // 存储保存的输出记录\r\n      currentRecordId: null // 当前显示的记录ID\r\n    };\r\n  },\r\n  methods: {\r\n    async submitCode() {\r\n      if (this.code.trim() === '') return;\r\n      const currentCode = this.code;\r\n      try {\r\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.code, option: this.selectedOption })\r\n        });\r\n        if (processResponse.ok) {\r\n          const result = await processResponse.json();\r\n          const newBlock = {\r\n            code: currentCode,\r\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`,\r\n            selectedOption: this.selectedOption // 保存选中的测试方法\r\n          };\r\n          if (this.selectedOption === 'option1' || this.selectedOption === 'option2') {\r\n            newBlock.testCases = result.testCases;\r\n          } else if (this.selectedOption === 'option3') {\r\n            newBlock.responseText = result.responseText;\r\n          }\r\n          this.responseBlocks.push(newBlock);\r\n          this.code = '';\r\n        } else {\r\n          const error = await processResponse.json();\r\n          console.error('Error processing code:', error.error);\r\n          alert(`Error: ${error.error}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error submitting code:', error);\r\n        alert('提交代码时发生错误，请检查控制台以获取详细信息。');\r\n      }\r\n    },\r\n    saveRecord() {\r\n      if (this.responseBlocks.length === 0) return;\r\n      const newRecord = {\r\n        id: Date.now(),\r\n        name: `记录 ${this.savedRecords.length + 1}`,\r\n        responseBlocks: [...this.responseBlocks]\r\n      };\r\n      this.savedRecords.push(newRecord);\r\n      this.currentRecordId = newRecord.id;\r\n      alert('记录已保存');\r\n    },\r\n    loadRecord(recordId) {\r\n      const record = this.savedRecords.find(r => r.id === recordId);\r\n      if (record) {\r\n        this.currentRecordId = record.id;\r\n        this.responseBlocks = [...record.responseBlocks];\r\n      }\r\n    },\r\n    deleteRecord(recordId) {\r\n      const index = this.savedRecords.findIndex(r => r.id === recordId);\r\n      if (index !== -1) {\r\n        if (confirm('确定要删除此记录吗？')) {\r\n          this.savedRecords.splice(index, 1);\r\n          if (this.currentRecordId === recordId) {\r\n            this.currentRecordId = null;\r\n            this.responseBlocks = [];\r\n          }\r\n          alert('记录已删除');\r\n        }\r\n      }\r\n    },\r\n    async downloadRecord(record) {\r\n      // 下载逻辑...\r\n    },\r\n    clearScreen() {\r\n      this.responseBlocks = [];\r\n    },\r\n    formatInputs(inputs) {\r\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");\r\n    },\r\n    escapeHtml(text) {\r\n      const map = {\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#039;'\r\n      };\r\n      return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\r\n    },\r\n    getOptionLabel(value) {\r\n      const option = this.options.find(opt => opt.value === value);\r\n      return option ? option.label : value;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 基本布局 */\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  background-color: #f0f2f5;\r\n  color: #333;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 侧边栏 */\r\n.sidebar {\r\n  width: 20%;\r\n  background-color: #f9f9f9; /* 浅灰色背景 */\r\n  color: #333;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.sidebar-title {\r\n  font-size: 1.5em;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.record-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #fff; /* 浅色记录框 */\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  cursor: pointer;\r\n}\r\n\r\n.record-item:hover {\r\n  background-color: #e6f7ff; /* 浅蓝色悬停 */\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.record-name {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.record-actions {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.action-button {\r\n  padding: 5px 10px;\r\n  background-color: #ccc; /* 白灰色按钮背景 */\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  font-size: 0.8em;\r\n}\r\n\r\n.download-button {\r\n  background-color: #ddd; /* 浅灰色用于下载 */\r\n}\r\n\r\n.delete-button {\r\n  background-color: #ccc; /* 浅灰色用于删除 */\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #bbb; /* 更深的灰色悬停 */\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* 主要内容区域 */\r\n.main-content {\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 选择方法区域 */\r\n.selection-area {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-bottom: 1px solid #d9d9d9;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.method-select {\r\n  width: 250px;\r\n  font-size: 18px;\r\n  transition: box-shadow 0.3s;\r\n}\r\n\r\n.method-select:hover {\r\n  box-shadow: 0 0 5px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n/* 上半部分内容 */\r\n.upper-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 150px;\r\n  background-color: #f0f2f5;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.intro-content {\r\n  text-align: center;\r\n  width: 1000px;\r\n  height: 200px;\r\n  padding: 100px 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* 确保阴影一直存在 */\r\n}\r\n\r\n.intro-content:hover,\r\n.intro-content:active,\r\n.intro-content:focus {\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* 确保交互时阴影样式不变 */\r\n}\r\n\r\n.response-block {\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.3s;\r\n}\r\n\r\n.response-block:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.flowchart-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.flowchart-image {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-input h3,\r\n.output-area h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n}\r\n\r\n.user-input pre,\r\n.output-area pre {\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  overflow-x: auto;\r\n  text-align: left; /* Ensures left alignment */\r\n  white-space: pre; /* Maintains original formatting */\r\n}\r\n\r\n.test-case {\r\n  background-color: #fafafa;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.test-case:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.method-info {\r\n  margin-top: 10px;\r\n  font-style: italic;\r\n  color: #555;\r\n}\r\n\r\n.response-text {\r\n  white-space: pre-wrap;  /* 保持换行 */\r\n  word-wrap: break-word;  /* 长单词或 URL 也换行 */\r\n  overflow-wrap: break-word;  /* 兼容性 */\r\n}\r\n\r\n/* 下半部分输入区域 */\r\n.input-area {\r\n  padding: 10px;\r\n  height: 160px;\r\n  background-color: #fff;\r\n  border-top: 1px solid #d9d9d9;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.input-row {\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  gap: 10px;\r\n  flex-wrap: nowrap;\r\n  align-items: center; /* 使按钮组垂直居中 */\r\n}\r\n\r\n.code-input {\r\n  flex: 1;\r\n  width: 100%;\r\n  height: 100px; /* 固定高度 */\r\n  max-height: 300px;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  overflow-y: auto; /* 仅显示滚动条 */\r\n  resize: none; /* 禁用大小调整 */\r\n  font-family: monospace;\r\n  white-space: pre-wrap;\r\n  box-sizing: border-box;\r\n  text-align: left;\r\n  font-size: 18px;\r\n}\r\n\r\n.code-input:focus {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 5px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  font-size: 18px;\r\n  gap: 10px;\r\n  flex-wrap: nowrap;\r\n  flex-shrink: 0;\r\n  align-items: center; /* 使按钮内部内容垂直居中 */\r\n}\r\n\r\n.submit-button,\r\n.save-button,\r\n.clear-button {\r\n  width: 120px; /* 固定宽度 */\r\n  height: 50px; /* 固定高度 */\r\n  background-color: #ccc; /* 白灰色背景 */\r\n  font-size: 18px;\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, transform 0.2s;\r\n  flex: 0 0 auto; /* 防止按钮缩放 */\r\n}\r\n\r\n.submit-button:hover,\r\n.save-button:hover,\r\n.clear-button:hover {\r\n  background-color: #bbb; /* 更深的灰色悬停 */\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* 过渡效果 */\r\n.fade-enter-active, .fade-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.fade-enter, .fade-leave-to /* .fade-leave-active for below version 2.1.8 */ {\r\n  opacity: 0;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1024px) {\r\n  .sidebar {\r\n    width: 25%;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .sidebar {\r\n    width: 100%;\r\n    height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .main-content {\r\n    width: 100%;\r\n  }\r\n\r\n  .input-row {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .button-group {\r\n    justify-content: center;\r\n  }\r\n\r\n  /* Adjust button sizes for smaller screens if necessary */\r\n  .submit-button,\r\n  .save-button,\r\n  .clear-button {\r\n    min-width: 80px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}