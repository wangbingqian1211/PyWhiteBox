{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      records: [{\n        id: 1,\n        name: '记录1'\n      }, {\n        id: 2,\n        name: '记录2'\n      }, {\n        id: 3,\n        name: '记录3'\n      }],\n      code: '',\n      responseBlocks: [],\n      // Stores user input and generated test cases, images, or response text\n      selectedOption: 'option1',\n      // Bound to the dropdown selector\n      options: [{\n        value: 'option1',\n        label: '基本路径测试'\n      }, {\n        value: 'option2',\n        label: '路径覆盖测试'\n      }, {\n        value: 'option3',\n        label: 'GPT测试'\n      }]\n    };\n  },\n  computed: {\n    textareaWidth() {\n      const minWidth = 300; // Minimum width in pixels\n      const maxWidth = 600; // Maximum width in pixels\n      const factor = 8; // Pixels per character (adjust as needed)\n      const calculatedWidth = minWidth + this.code.length * factor;\n      return `${Math.min(calculatedWidth, maxWidth)}px`;\n    }\n  },\n  methods: {\n    async submitCode() {\n      if (this.code.trim() === '') return; // Prevent submitting empty input\n\n      // Save the current user input\n      const currentCode = this.code;\n      try {\n        // Call the backend API to process the user input code\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {\n          // Changed to port 5001\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code,\n            option: this.selectedOption\n          }) // Pass the selected option\n        });\n        if (processResponse.ok) {\n          const result = await processResponse.json();\n\n          // Construct a new response block including code, generated test cases, and flowchart path or response text\n          const newBlock = {\n            code: currentCode,\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}` // Ensure the path is correct\n          };\n          if (this.selectedOption === 'option1' || this.selectedOption === 'option2') {\n            newBlock.testCases = result.testCases;\n          } else if (this.selectedOption === 'option3') {\n            newBlock.responseText = result.responseText;\n          }\n\n          // Add the new response block to responseBlocks\n          this.responseBlocks.push(newBlock);\n\n          // Clear the input textarea\n          this.code = '';\n        } else {\n          const error = await processResponse.json();\n          console.error('Error processing code:', error.error);\n          alert(`Error: ${error.error}`);\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n        alert('提交代码时发生错误，请检查控制台以获取详细信息。');\n      }\n    },\n    formatInputs(inputs) {\n      // Format inputs object as a string like \"{'age': -346, 'b': -886}\"\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\"); // Preserve format and indentation\n    }\n  }\n};","map":{"version":3,"names":["data","records","id","name","code","responseBlocks","selectedOption","options","value","label","computed","textareaWidth","minWidth","maxWidth","factor","calculatedWidth","length","Math","min","methods","submitCode","trim","currentCode","processResponse","fetch","method","headers","body","JSON","stringify","option","ok","result","json","newBlock","flowchartPath","testCases","responseText","push","error","console","alert","formatInputs","inputs","replace"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 左侧菜单 -->\r\n    <aside class=\"sidebar\">\r\n      <ul>\r\n        <li v-for=\"record in records\" :key=\"record.id\">{{ record.name }}</li>\r\n      </ul>\r\n    </aside>\r\n\r\n    <!-- 右侧内容区域 -->\r\n    <main class=\"main-content\">\r\n      <!-- 选择方法的独立区域 -->\r\n      <div class=\"selection-area\">\r\n        <el-select v-model=\"selectedOption\" placeholder=\"请选择测试方法\" style=\"width: 300px;\">\r\n          <el-option\r\n              v-for=\"item in options\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n          </el-option>\r\n        </el-select>\r\n      </div>\r\n\r\n      <!-- 上半部分，包含用户输入显示和测试结果 -->\r\n      <div class=\"upper-content\">\r\n        <!-- 动态生成每个回答块，包含代码、图片、测试结果或响应文本 -->\r\n        <div v-for=\"(block, index) in responseBlocks\" :key=\"index\" class=\"response-block centered-content\">\r\n          <!-- 显示生成的流程图 -->\r\n          <div v-if=\"block.flowchartPath\">\r\n            <img :src=\"block.flowchartPath\" alt=\"流程图\" class=\"flowchart-image\"/>\r\n          </div>\r\n\r\n          <!-- 显示用户输入的代码 -->\r\n          <div class=\"user-input\">\r\n            <pre>{{ block.code }}</pre>\r\n          </div>\r\n\r\n          <!-- 根据是否有 testCases 或 responseText 显示相应内容 -->\r\n          <div class=\"output-area\">\r\n            <div v-if=\"block.testCases && block.testCases.length\">\r\n              <div v-for=\"(testCase, i) in block.testCases\" :key=\"i\" class=\"test-case\">\r\n                <p>测试用例 {{ i + 1 }}:</p>\r\n                <p>&nbsp;&nbsp;输入: {{ formatInputs(testCase.inputs) }}</p>\r\n                <p>&nbsp;&nbsp;条件: {{ testCase.conditions }}</p>\r\n              </div>\r\n            </div>\r\n            <div v-else-if=\"block.responseText\">\r\n              <pre class=\"response-text\">{{ block.responseText }}</pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 显示介绍文字 -->\r\n        <div v-if=\"responseBlocks.length === 0\" class=\"intro-content\">\r\n          <h1>白盒测试通</h1>\r\n          <p>你的自动测试小助手</p>\r\n          <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 下半部分，固定的输入框 -->\r\n      <div class=\"input-area\">\r\n        <div class=\"input-row\">\r\n          <textarea\r\n              v-model=\"code\"\r\n              placeholder=\"请输入你要进行测试的代码\"\r\n              class=\"code-input\"\r\n              :style=\"{ width: textareaWidth }\"  <!-- Dynamic width binding -->\r\n          ></textarea>\r\n          <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      records: [\r\n        { id: 1, name: '记录1' },\r\n        { id: 2, name: '记录2' },\r\n        { id: 3, name: '记录3' }\r\n      ],\r\n      code: '',\r\n      responseBlocks: [],  // Stores user input and generated test cases, images, or response text\r\n      selectedOption: 'option1',  // Bound to the dropdown selector\r\n      options: [\r\n        { value: 'option1', label: '基本路径测试' },\r\n        { value: 'option2', label: '路径覆盖测试' },\r\n        { value: 'option3', label: 'GPT测试' }\r\n      ]\r\n    };\r\n  },\r\n  computed: {\r\n    textareaWidth() {\r\n      const minWidth = 300; // Minimum width in pixels\r\n      const maxWidth = 600; // Maximum width in pixels\r\n      const factor = 8; // Pixels per character (adjust as needed)\r\n      const calculatedWidth = minWidth + this.code.length * factor;\r\n      return `${Math.min(calculatedWidth, maxWidth)}px`;\r\n    }\r\n  },\r\n  methods: {\r\n    async submitCode() {\r\n      if (this.code.trim() === '') return;  // Prevent submitting empty input\r\n\r\n      // Save the current user input\r\n      const currentCode = this.code;\r\n\r\n      try {\r\n        // Call the backend API to process the user input code\r\n        const processResponse = await fetch('http://127.0.0.1:5001/api/process_code', {  // Changed to port 5001\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.code, option: this.selectedOption })  // Pass the selected option\r\n        });\r\n\r\n        if (processResponse.ok) {\r\n          const result = await processResponse.json();\r\n\r\n          // Construct a new response block including code, generated test cases, and flowchart path or response text\r\n          const newBlock = {\r\n            code: currentCode,\r\n            flowchartPath: `http://127.0.0.1:5001${result.flowchartPath}`  // Ensure the path is correct\r\n          };\r\n\r\n          if (this.selectedOption === 'option1' || this.selectedOption === 'option2') {\r\n            newBlock.testCases = result.testCases;\r\n          } else if (this.selectedOption === 'option3') {\r\n            newBlock.responseText = result.responseText;\r\n          }\r\n\r\n          // Add the new response block to responseBlocks\r\n          this.responseBlocks.push(newBlock);\r\n\r\n          // Clear the input textarea\r\n          this.code = '';\r\n        } else {\r\n          const error = await processResponse.json();\r\n          console.error('Error processing code:', error.error);\r\n          alert(`Error: ${error.error}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error submitting code:', error);\r\n        alert('提交代码时发生错误，请检查控制台以获取详细信息。');\r\n      }\r\n    },\r\n    formatInputs(inputs) {\r\n      // Format inputs object as a string like \"{'age': -346, 'b': -886}\"\r\n      return JSON.stringify(inputs, null, 2).replace(/\"/g, \"'\");  // Preserve format and indentation\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n/* Hide the entire page's scrollbar */\r\nhtml, body {\r\n  overflow: hidden;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.sidebar {\r\n  width: 15%;\r\n  background-color: #f9f9f9;\r\n  padding: 20px;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar li {\r\n  padding: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.main-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 85%;\r\n  height: 100vh;\r\n}\r\n\r\n.selection-area {\r\n  padding: 10px 20px;\r\n  background-color: #ffffff;\r\n  border-bottom: 1px solid #ccc;\r\n  position: sticky; /* Keep at the top */\r\n  top: 0;\r\n  z-index: 10; /* Ensure above other content */\r\n  display: flex;\r\n  justify-content: flex-start; /* Left-aligned or adjust as needed */\r\n}\r\n\r\n.upper-content {\r\n  flex: 1;\r\n  overflow-y: auto; /* Add vertical scrollbar */\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.intro-content {\r\n  text-align: center; /* Center the introductory text */\r\n  margin-bottom: 10px;\r\n  padding: 90px;\r\n}\r\n\r\n.centered-content {\r\n  width: 100%;\r\n  max-width: 800px; /* Adjust width to avoid horizontal scrollbar */\r\n  margin: 0 auto;\r\n  text-align: left; /* Left-align text */\r\n}\r\n\r\n.response-block {\r\n  width: 100%;\r\n  max-width: 800px; /* Consistent with .centered-content */\r\n  margin-bottom: 20px; /* Spacing between blocks */\r\n}\r\n\r\n.user-input {\r\n  background-color: #e0e0e0;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  margin-bottom: 10px;\r\n  max-width: 600px; /* Adjust width to avoid horizontal scrollbar */\r\n  margin: 0 auto; /* Center horizontally */\r\n  text-align: left; /* Keep content left-aligned */\r\n}\r\n\r\n.user-input pre {\r\n  white-space: pre-wrap; /* Preserve line breaks and spaces */\r\n  font-family: monospace; /* Use monospace font */\r\n  margin: 0;\r\n  text-align: left; /* Left-align text */\r\n}\r\n\r\n.flowchart-image {\r\n  width: 100%;\r\n  max-width: 800px;\r\n  max-height: 600px;\r\n  object-fit: contain; /* Maintain aspect ratio */\r\n  margin: 20px 0;\r\n}\r\n\r\n.input-area {\r\n  padding: 20px;\r\n  border-top: 1px solid #ccc;\r\n  background-color: #f9f9f9;\r\n  display: flex;\r\n  justify-content: center; /* Center horizontally */\r\n  align-items: center; /* Center vertically */\r\n}\r\n\r\n.input-row {\r\n  display: flex;\r\n  align-items: center; /* Align button vertically with textarea */\r\n  max-width: 700px; /* Set a reasonable maximum width */\r\n  width: 100%; /* Occupy full width of the parent container */\r\n  flex-wrap: nowrap; /* Prevent wrapping */\r\n}\r\n\r\n.code-input {\r\n  /* Removed fixed width properties to allow dynamic width */\r\n  /* flex: 1;\r\n  max-width: 600px;\r\n  width: 100%; */\r\n  min-height: 20px; /* Initial height for one line */\r\n  max-height: 300px; /* Set maximum height */\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  resize: none; /* Disable manual resizing */\r\n  font-family: monospace;\r\n  white-space: pre-wrap; /* Preserve whitespace and line breaks */\r\n  overflow-y: auto; /* Enable vertical scrolling when content exceeds */\r\n  overflow-x: hidden; /* Disable horizontal scrolling */\r\n  line-height: 1.5;\r\n  transition: width 0.2s ease; /* Smooth transition for width changes */\r\n}\r\n\r\n.submit-button {\r\n  padding: 10px 20px;\r\n  background-color: #535553;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  flex-shrink: 0; /* Prevent button from shrinking */\r\n  width: 120px; /* Set fixed width for the button */\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #888f88;\r\n}\r\n\r\n.output-area {\r\n  width: 100%;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  text-align: left; /* Keep content left-aligned */\r\n  max-width: 600px; /* Adjust width to avoid horizontal scrollbar */\r\n  margin: 0 auto; /* Center horizontally */\r\n}\r\n\r\n.test-case {\r\n  background-color: #f4f4f4;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.response-text {\r\n  white-space: pre-wrap; /* Preserve line breaks and spaces */\r\n  font-family: inherit; /* Use inherited font */\r\n}\r\n\r\n/* Responsive adjustments (optional) */\r\n@media (max-width: 768px) {\r\n  .centered-content {\r\n    max-width: 100%;\r\n    padding: 0 10px; /* Add padding to avoid content touching edges */\r\n  }\r\n\r\n  .flowchart-image, .output-area, .user-input {\r\n    max-width: 100%; /* Adapt to small screens */\r\n  }\r\n\r\n  .input-row {\r\n    max-width: 100%;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .code-input {\r\n    max-width: 100%;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .submit-button {\r\n    width: 100%;\r\n  }\r\n\r\n  .selection-area {\r\n    justify-content: center; /* Center select box on small screens */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AA4EA;EACAA,KAAA;IACA;MACAC,OAAA,GACA;QAAAC,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,EACA;MACAC,IAAA;MACAC,cAAA;MAAA;MACAC,cAAA;MAAA;MACAC,OAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,QAAA;MACA,MAAAC,QAAA;MACA,MAAAC,MAAA;MACA,MAAAC,eAAA,GAAAH,QAAA,QAAAR,IAAA,CAAAY,MAAA,GAAAF,MAAA;MACA,UAAAG,IAAA,CAAAC,GAAA,CAAAH,eAAA,EAAAF,QAAA;IACA;EACA;EACAM,OAAA;IACA,MAAAC,WAAA;MACA,SAAAhB,IAAA,CAAAiB,IAAA;;MAEA;MACA,MAAAC,WAAA,QAAAlB,IAAA;MAEA;QACA;QACA,MAAAmB,eAAA,SAAAC,KAAA;UAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAzB,IAAA,OAAAA,IAAA;YAAA0B,MAAA,OAAAxB;UAAA;QACA;QAEA,IAAAiB,eAAA,CAAAQ,EAAA;UACA,MAAAC,MAAA,SAAAT,eAAA,CAAAU,IAAA;;UAEA;UACA,MAAAC,QAAA;YACA9B,IAAA,EAAAkB,WAAA;YACAa,aAAA,0BAAAH,MAAA,CAAAG,aAAA;UACA;UAEA,SAAA7B,cAAA,uBAAAA,cAAA;YACA4B,QAAA,CAAAE,SAAA,GAAAJ,MAAA,CAAAI,SAAA;UACA,gBAAA9B,cAAA;YACA4B,QAAA,CAAAG,YAAA,GAAAL,MAAA,CAAAK,YAAA;UACA;;UAEA;UACA,KAAAhC,cAAA,CAAAiC,IAAA,CAAAJ,QAAA;;UAEA;UACA,KAAA9B,IAAA;QACA;UACA,MAAAmC,KAAA,SAAAhB,eAAA,CAAAU,IAAA;UACAO,OAAA,CAAAD,KAAA,2BAAAA,KAAA,CAAAA,KAAA;UACAE,KAAA,WAAAF,KAAA,CAAAA,KAAA;QACA;MACA,SAAAA,KAAA;QACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;QACAE,KAAA;MACA;IACA;IACAC,aAAAC,MAAA;MACA;MACA,OAAAf,IAAA,CAAAC,SAAA,CAAAc,MAAA,WAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}