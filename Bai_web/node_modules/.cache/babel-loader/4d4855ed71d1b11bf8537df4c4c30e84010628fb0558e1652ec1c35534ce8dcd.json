{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      records: [{\n        id: 1,\n        name: '记录1'\n      }, {\n        id: 2,\n        name: '记录2'\n      }, {\n        id: 3,\n        name: '记录3'\n      }],\n      code: '',\n      responseBlocks: [],\n      // 存储用户输入和对应生成的测试用例以及图片路径\n      selectedOption: 'option1',\n      // 绑定到下拉选择器的选项\n      options: [{\n        value: 'option1',\n        label: '基本路径测试'\n      }, {\n        value: 'option2',\n        label: '路径覆盖测试'\n      }, {\n        value: 'option3',\n        label: 'gpt测试'\n      }]\n    };\n  },\n  methods: {\n    async submitCode() {\n      if (this.code.trim() === '') return; // 防止提交空输入\n\n      // 保存当前用户的输入\n      const currentCode = this.code;\n      try {\n        // 调用后端 API 处理用户输入的代码\n        const processResponse = await fetch('http://127.0.0.1:5000/api/process_code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            code: this.code,\n            option: this.selectedOption\n          }) // 传递选项参数\n        });\n        if (processResponse.ok) {\n          const result = await processResponse.json();\n\n          // 等待1秒以确保图片生成完成\n          setTimeout(async () => {\n            // 调用后端 API 获取最新的图片路径\n            const imageResponse = await fetch('http://127.0.0.1:5000/api/latest_image');\n            const imageResult = await imageResponse.json();\n\n            // 构建新的回答块，包括代码、生成的测试用例和流程图路径\n            const newBlock = {\n              code: currentCode,\n              testCases: result.testCases,\n              flowchartPath: `http://127.0.0.1:5000/output/${imageResult.latestImagePath}?t=${new Date().getTime()}`\n            };\n\n            // 将新的回答块添加到responseBlocks中\n            this.responseBlocks.push(newBlock);\n\n            // 清空输入框\n            this.code = '';\n          }, 1000); // 延迟1秒\n        } else {\n          console.error('Error processing code');\n        }\n      } catch (error) {\n        console.error('Error submitting code:', error);\n      }\n    },\n    formatInputs(inputs) {\n      // 将 inputs 对象格式化为类似 \"{'age': -346, 'b': -886}\" 的字符串\n      return JSON.stringify(inputs).replace(/\"/g, \"'\");\n    }\n  }\n};","map":{"version":3,"names":["data","records","id","name","code","responseBlocks","selectedOption","options","value","label","methods","submitCode","trim","currentCode","processResponse","fetch","method","headers","body","JSON","stringify","option","ok","result","json","setTimeout","imageResponse","imageResult","newBlock","testCases","flowchartPath","latestImagePath","Date","getTime","push","console","error","formatInputs","inputs","replace"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 左侧菜单 -->\r\n    <aside class=\"sidebar\">\r\n      <ul>\r\n        <li v-for=\"record in records\" :key=\"record.id\">{{ record.name }}</li>\r\n      </ul>\r\n    </aside>\r\n\r\n    <!-- 右侧内容区域 -->\r\n    <main class=\"main-content\">\r\n      <!-- 上半部分，包含用户输入显示和测试结果 -->\r\n      <div class=\"upper-content\">\r\n        <!-- 在这里添加下拉选择器 -->\r\n        <el-select v-model=\"selectedOption\" placeholder=\"基本路径测试（默认）\" style=\"margin-bottom: 20px;\">\r\n          <el-option\r\n              v-for=\"item in options\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n          </el-option>\r\n        </el-select>\r\n\r\n        <!-- 动态生成每个回答块，包含代码、图片、测试结果 -->\r\n        <div v-for=\"(block, index) in responseBlocks\" :key=\"index\" class=\"response-block centered-content\">\r\n          <!-- 显示生成的流程图 -->\r\n          <div v-if=\"block.flowchartPath\">\r\n            <img :src=\"block.flowchartPath\" alt=\"流程图\" class=\"flowchart-image\"/>\r\n          </div>\r\n\r\n          <!-- 显示用户输入的代码 -->\r\n          <div class=\"user-input\">\r\n            <pre>{{ block.code }}</pre>\r\n          </div>\r\n\r\n          <!-- 显示生成的测试结果 -->\r\n          <div class=\"output-area\">\r\n            <div v-for=\"(testCase, i) in block.testCases\" :key=\"i\" class=\"test-case\">\r\n              <p>测试用例 {{ i + 1 }}:</p>\r\n              <p>&nbsp;&nbsp;输入: {{ formatInputs(testCase.inputs) }}</p>\r\n              <p>&nbsp;&nbsp;条件: {{ testCase.conditions }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 显示介绍文字 -->\r\n        <div v-if=\"responseBlocks.length === 0\" class=\"intro-content\">\r\n          <h1>白盒测试通</h1>\r\n          <p>你的自动测试小助手</p>\r\n          <p>输入测试代码，你将得到：程序流程图、基本路径集合、测试用例</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 下半部分，固定的输入框 -->\r\n      <div class=\"input-area\">\r\n        <div class=\"input-row\">\r\n          <textarea\r\n              v-model=\"code\"\r\n              placeholder=\"请输入你要进行测试的代码\"\r\n              class=\"code-input\"\r\n          ></textarea>\r\n          <button @click=\"submitCode\" class=\"submit-button\">提交代码</button>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      records: [\r\n        { id: 1, name: '记录1' },\r\n        { id: 2, name: '记录2' },\r\n        { id: 3, name: '记录3' }\r\n      ],\r\n      code: '',\r\n      responseBlocks: [],  // 存储用户输入和对应生成的测试用例以及图片路径\r\n      selectedOption: 'option1',  // 绑定到下拉选择器的选项\r\n      options: [\r\n        { value: 'option1', label: '基本路径测试' },\r\n        { value: 'option2', label: '路径覆盖测试' },\r\n        { value: 'option3', label: 'gpt测试' }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    async submitCode() {\r\n      if (this.code.trim() === '') return;  // 防止提交空输入\r\n\r\n      // 保存当前用户的输入\r\n      const currentCode = this.code;\r\n\r\n      try {\r\n        // 调用后端 API 处理用户输入的代码\r\n        const processResponse = await fetch('http://127.0.0.1:5000/api/process_code', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ code: this.code, option: this.selectedOption })  // 传递选项参数\r\n        });\r\n\r\n        if (processResponse.ok) {\r\n          const result = await processResponse.json();\r\n\r\n          // 等待1秒以确保图片生成完成\r\n          setTimeout(async () => {\r\n            // 调用后端 API 获取最新的图片路径\r\n            const imageResponse = await fetch('http://127.0.0.1:5000/api/latest_image');\r\n            const imageResult = await imageResponse.json();\r\n\r\n            // 构建新的回答块，包括代码、生成的测试用例和流程图路径\r\n            const newBlock = {\r\n              code: currentCode,\r\n              testCases: result.testCases,\r\n              flowchartPath: `http://127.0.0.1:5000/output/${imageResult.latestImagePath}?t=${new Date().getTime()}`\r\n            };\r\n\r\n            // 将新的回答块添加到responseBlocks中\r\n            this.responseBlocks.push(newBlock);\r\n\r\n            // 清空输入框\r\n            this.code = '';\r\n          }, 1000);  // 延迟1秒\r\n\r\n        } else {\r\n          console.error('Error processing code');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error submitting code:', error);\r\n      }\r\n    },\r\n    formatInputs(inputs) {\r\n      // 将 inputs 对象格式化为类似 \"{'age': -346, 'b': -886}\" 的字符串\r\n      return JSON.stringify(inputs).replace(/\"/g, \"'\")\r\n    }\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* 隐藏整个页面的滚动条 */\r\nhtml, body {\r\n  overflow: hidden;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.sidebar {\r\n  width: 15%;\r\n  background-color: #f9f9f9;\r\n  padding: 20px;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar li {\r\n  padding: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.main-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  height: 100vh;\r\n}\r\n\r\n.upper-content {\r\n  flex: 1;\r\n  margin-left: 100px;\r\n  overflow-y: auto; /* 添加垂直滚动条 */\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  overflow-x: hidden; /* 移除横向滚动条 */\r\n}\r\n\r\n.intro-content {\r\n  text-align: center; /* 让介绍文字居中显示 */\r\n  margin-bottom: 10px;\r\n  padding: 90px;\r\n}\r\n\r\n.centered-content {\r\n  width: 100%;\r\n  max-width: 800px; /* 调整宽度，避免横向滚动条 */\r\n  margin: 0 auto;\r\n  text-align: left; /* 文字左对齐 */\r\n}\r\n\r\n.response-block {\r\n  margin-bottom: 20px; /* 每个块之间的间距 */\r\n}\r\n\r\n.user-input {\r\n  background-color: #e0e0e0;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  margin-left: 90px;\r\n  margin-bottom: 10px;\r\n  max-width: 600px; /* 调整宽度，避免横向滚动条 */\r\n}\r\n\r\n.user-input pre {\r\n  white-space: pre-wrap; /* 保留换行符和空格 */\r\n  font-family: monospace; /* 使用等宽字体 */\r\n  margin: 0;\r\n  text-align: left; /* 文字左对齐 */\r\n}\r\n\r\n.flowchart-image {\r\n  width: 100%;\r\n  max-width: 800px;\r\n  max-height: 600px;\r\n  object-fit: contain; /* 保持图片等比缩放 */\r\n  margin: 20px 0;\r\n}\r\n\r\n.input-area {\r\n  padding: 20px;\r\n  border-top: 1px solid #ccc;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.input-row {\r\n  display: flex;\r\n  align-items: center; /* 使按钮与输入框垂直居中对齐 */\r\n}\r\n\r\n.code-input {\r\n  flex: 1;\r\n  height: 50px;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  resize: none; /* 禁用 textarea 调整大小 */\r\n  font-family: monospace; /* 使用等宽字体 */\r\n  white-space: pre; /* 保留空白字符和换行 */\r\n  margin-right: 10px; /* 为按钮留出一些空间 */\r\n}\r\n\r\n.submit-button {\r\n  padding: 10px 20px;\r\n  background-color: #535553;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #888f88;\r\n}\r\n\r\n.output-area {\r\n  width: 100%;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  text-align: left;\r\n  max-width: 600px; /* 调整宽度，避免横向滚动条 */\r\n  margin: 0 auto; /* 居中 */\r\n}\r\n\r\n.test-case {\r\n  background-color: #f4f4f4;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAqEA;EACAA,KAAA;IACA;MACAC,OAAA,GACA;QAAAC,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,EAAA;QAAAC,IAAA;MAAA,EACA;MACAC,IAAA;MACAC,cAAA;MAAA;MACAC,cAAA;MAAA;MACAC,OAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,SAAAP,IAAA,CAAAQ,IAAA;;MAEA;MACA,MAAAC,WAAA,QAAAT,IAAA;MAEA;QACA;QACA,MAAAU,eAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAhB,IAAA,OAAAA,IAAA;YAAAiB,MAAA,OAAAf;UAAA;QACA;QAEA,IAAAQ,eAAA,CAAAQ,EAAA;UACA,MAAAC,MAAA,SAAAT,eAAA,CAAAU,IAAA;;UAEA;UACAC,UAAA;YACA;YACA,MAAAC,aAAA,SAAAX,KAAA;YACA,MAAAY,WAAA,SAAAD,aAAA,CAAAF,IAAA;;YAEA;YACA,MAAAI,QAAA;cACAxB,IAAA,EAAAS,WAAA;cACAgB,SAAA,EAAAN,MAAA,CAAAM,SAAA;cACAC,aAAA,kCAAAH,WAAA,CAAAI,eAAA,UAAAC,IAAA,GAAAC,OAAA;YACA;;YAEA;YACA,KAAA5B,cAAA,CAAA6B,IAAA,CAAAN,QAAA;;YAEA;YACA,KAAAxB,IAAA;UACA;QAEA;UACA+B,OAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACAD,OAAA,CAAAC,KAAA,2BAAAA,KAAA;MACA;IACA;IACAC,aAAAC,MAAA;MACA;MACA,OAAAnB,IAAA,CAAAC,SAAA,CAAAkB,MAAA,EAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}